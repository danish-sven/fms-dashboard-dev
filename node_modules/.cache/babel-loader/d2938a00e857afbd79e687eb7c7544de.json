{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Vector3, Matrix4, assert, equals, _MathUtils } from '@math.gl/core';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z } from '../constants';\nimport { fromCartographicToRadians, toCartographicFromRadians } from '../type-utils';\nimport scaleToGeodeticSurface from './helpers/scale-to-geodetic-surface';\nimport localFrameToFixedFrame from './helpers/ellipsoid-transform';\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\nconst scratchK = new Vector3();\nconst scratchPosition = new Vector3();\nconst scratchHeight = new Vector3();\nconst scratchCartesian = new Vector3();\nlet wgs84;\nexport default class Ellipsoid {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;\n    _defineProperty(this, \"radii\", void 0);\n    _defineProperty(this, \"radiiSquared\", void 0);\n    _defineProperty(this, \"radiiToTheFourth\", void 0);\n    _defineProperty(this, \"oneOverRadii\", void 0);\n    _defineProperty(this, \"oneOverRadiiSquared\", void 0);\n    _defineProperty(this, \"minimumRadius\", void 0);\n    _defineProperty(this, \"maximumRadius\", void 0);\n    _defineProperty(this, \"centerToleranceSquared\", _MathUtils.EPSILON1);\n    _defineProperty(this, \"squaredXOverSquaredZ\", void 0);\n    assert(x >= 0.0);\n    assert(y >= 0.0);\n    assert(z >= 0.0);\n    this.radii = new Vector3(x, y, z);\n    this.radiiSquared = new Vector3(x * x, y * y, z * z);\n    this.radiiToTheFourth = new Vector3(x * x * x * x, y * y * y * y, z * z * z * z);\n    this.oneOverRadii = new Vector3(x === 0.0 ? 0.0 : 1.0 / x, y === 0.0 ? 0.0 : 1.0 / y, z === 0.0 ? 0.0 : 1.0 / z);\n    this.oneOverRadiiSquared = new Vector3(x === 0.0 ? 0.0 : 1.0 / (x * x), y === 0.0 ? 0.0 : 1.0 / (y * y), z === 0.0 ? 0.0 : 1.0 / (z * z));\n    this.minimumRadius = Math.min(x, y, z);\n    this.maximumRadius = Math.max(x, y, z);\n    if (this.radiiSquared.z !== 0) {\n      this.squaredXOverSquaredZ = this.radiiSquared.x / this.radiiSquared.z;\n    }\n    Object.freeze(this);\n  }\n  equals(right) {\n    return this === right || Boolean(right && this.radii.equals(right.radii));\n  }\n  toString() {\n    return this.radii.toString();\n  }\n  cartographicToCartesian(cartographic) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    const normal = scratchNormal;\n    const k = scratchK;\n    const [,, height] = cartographic;\n    this.geodeticSurfaceNormalCartographic(cartographic, normal);\n    k.copy(this.radiiSquared).scale(normal);\n    const gamma = Math.sqrt(normal.dot(k));\n    k.scale(1 / gamma);\n    normal.scale(height);\n    k.add(normal);\n    return k.to(result);\n  }\n  cartesianToCartographic(cartesian) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    scratchCartesian.from(cartesian);\n    const point = this.scaleToGeodeticSurface(scratchCartesian, scratchPosition);\n    if (!point) {\n      return undefined;\n    }\n    const normal = this.geodeticSurfaceNormal(point, scratchNormal);\n    const h = scratchHeight;\n    h.copy(scratchCartesian).subtract(point);\n    const longitude = Math.atan2(normal.y, normal.x);\n    const latitude = Math.asin(normal.z);\n    const height = Math.sign(vec3.dot(h, scratchCartesian)) * vec3.length(h);\n    return toCartographicFromRadians([longitude, latitude, height], result);\n  }\n  eastNorthUpToFixedFrame(origin) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Matrix4();\n    return localFrameToFixedFrame(this, 'east', 'north', 'up', origin, result);\n  }\n  localFrameToFixedFrame(firstAxis, secondAxis, thirdAxis, origin) {\n    let result = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Matrix4();\n    return localFrameToFixedFrame(this, firstAxis, secondAxis, thirdAxis, origin, result);\n  }\n  geocentricSurfaceNormal(cartesian) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    return scratchVector.from(cartesian).normalize().to(result);\n  }\n  geodeticSurfaceNormalCartographic(cartographic) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    const cartographicVectorRadians = fromCartographicToRadians(cartographic);\n    const longitude = cartographicVectorRadians[0];\n    const latitude = cartographicVectorRadians[1];\n    const cosLatitude = Math.cos(latitude);\n    scratchVector.set(cosLatitude * Math.cos(longitude), cosLatitude * Math.sin(longitude), Math.sin(latitude)).normalize();\n    return scratchVector.to(result);\n  }\n  geodeticSurfaceNormal(cartesian) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    return scratchVector.from(cartesian).scale(this.oneOverRadiiSquared).normalize().to(result);\n  }\n  scaleToGeodeticSurface(cartesian, result) {\n    return scaleToGeodeticSurface(cartesian, this, result);\n  }\n  scaleToGeocentricSurface(cartesian) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    scratchPosition.from(cartesian);\n    const positionX = scratchPosition.x;\n    const positionY = scratchPosition.y;\n    const positionZ = scratchPosition.z;\n    const oneOverRadiiSquared = this.oneOverRadiiSquared;\n    const beta = 1.0 / Math.sqrt(positionX * positionX * oneOverRadiiSquared.x + positionY * positionY * oneOverRadiiSquared.y + positionZ * positionZ * oneOverRadiiSquared.z);\n    return scratchPosition.multiplyScalar(beta).to(result);\n  }\n  transformPositionToScaledSpace(position) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    return scratchPosition.from(position).scale(this.oneOverRadii).to(result);\n  }\n  transformPositionFromScaledSpace(position) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    return scratchPosition.from(position).scale(this.radii).to(result);\n  }\n  getSurfaceNormalIntersectionWithZAxis(position) {\n    let buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0, 0];\n    assert(equals(this.radii.x, this.radii.y, _MathUtils.EPSILON15));\n    assert(this.radii.z > 0);\n    scratchPosition.from(position);\n    const z = scratchPosition.z * (1 - this.squaredXOverSquaredZ);\n    if (Math.abs(z) >= this.radii.z - buffer) {\n      return undefined;\n    }\n    return scratchPosition.set(0.0, 0.0, z).to(result);\n  }\n}\n_defineProperty(Ellipsoid, \"WGS84\", new Ellipsoid(WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z));","map":{"version":3,"names":["Vector3","Matrix4","assert","equals","_MathUtils","vec3","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","fromCartographicToRadians","toCartographicFromRadians","scaleToGeodeticSurface","localFrameToFixedFrame","scratchVector","scratchNormal","scratchK","scratchPosition","scratchHeight","scratchCartesian","wgs84","Ellipsoid","constructor","x","arguments","length","undefined","y","z","_defineProperty","EPSILON1","radii","radiiSquared","radiiToTheFourth","oneOverRadii","oneOverRadiiSquared","minimumRadius","Math","min","maximumRadius","max","squaredXOverSquaredZ","Object","freeze","right","Boolean","toString","cartographicToCartesian","cartographic","result","normal","k","height","geodeticSurfaceNormalCartographic","copy","scale","gamma","sqrt","dot","add","to","cartesianToCartographic","cartesian","from","point","geodeticSurfaceNormal","h","subtract","longitude","atan2","latitude","asin","sign","eastNorthUpToFixedFrame","origin","firstAxis","secondAxis","thirdAxis","geocentricSurfaceNormal","normalize","cartographicVectorRadians","cosLatitude","cos","set","sin","scaleToGeocentricSurface","positionX","positionY","positionZ","beta","multiplyScalar","transformPositionToScaledSpace","position","transformPositionFromScaledSpace","getSurfaceNormalIntersectionWithZAxis","buffer","EPSILON15","abs"],"sources":["../../../src/ellipsoid/ellipsoid.ts"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {\n  Vector3,\n  Matrix4,\n  toRadians,\n  toDegrees,\n  assert,\n  equals,\n  _MathUtils,\n  NumericArray\n} from '@math.gl/core';\nimport * as vec3 from 'gl-matrix/vec3';\n\nimport {WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z} from '../constants';\nimport {fromCartographicToRadians, toCartographicFromRadians} from '../type-utils';\n\nimport scaleToGeodeticSurface from './helpers/scale-to-geodetic-surface';\nimport localFrameToFixedFrame from './helpers/ellipsoid-transform';\n\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\nconst scratchK = new Vector3();\nconst scratchPosition = new Vector3();\nconst scratchHeight = new Vector3();\nconst scratchCartesian = new Vector3();\n\nlet wgs84;\n\n/**\n * A quadratic surface defined in Cartesian coordinates by the equation\n * `(x / a)^2 + (y / b)^2 + (z / c)^2 = 1`.  Primarily used\n * to represent the shape of planetary bodies.\n */\nexport default class Ellipsoid {\n  /** An Ellipsoid instance initialized to the WGS84 standard. */\n  static readonly WGS84: Ellipsoid = new Ellipsoid(WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z);\n\n  readonly radii: Vector3;\n  readonly radiiSquared: Vector3;\n  readonly radiiToTheFourth: Vector3;\n  readonly oneOverRadii: Vector3;\n  readonly oneOverRadiiSquared: Vector3;\n  readonly minimumRadius: number;\n  readonly maximumRadius: number;\n  readonly centerToleranceSquared: number = _MathUtils.EPSILON1;\n  readonly squaredXOverSquaredZ: number;\n\n  /** Creates an Ellipsoid from a Cartesian specifying the radii in x, y, and z directions. */\n  constructor(x: number, y: number, z: number);\n  constructor();\n\n  constructor(x = 0.0, y = 0.0, z = 0.0) {\n    assert(x >= 0.0);\n    assert(y >= 0.0);\n    assert(z >= 0.0);\n\n    this.radii = new Vector3(x, y, z);\n\n    this.radiiSquared = new Vector3(x * x, y * y, z * z);\n\n    this.radiiToTheFourth = new Vector3(x * x * x * x, y * y * y * y, z * z * z * z);\n\n    this.oneOverRadii = new Vector3(\n      x === 0.0 ? 0.0 : 1.0 / x,\n      y === 0.0 ? 0.0 : 1.0 / y,\n      z === 0.0 ? 0.0 : 1.0 / z\n    );\n\n    this.oneOverRadiiSquared = new Vector3(\n      x === 0.0 ? 0.0 : 1.0 / (x * x),\n      y === 0.0 ? 0.0 : 1.0 / (y * y),\n      z === 0.0 ? 0.0 : 1.0 / (z * z)\n    );\n\n    this.minimumRadius = Math.min(x, y, z);\n\n    this.maximumRadius = Math.max(x, y, z);\n\n    if (this.radiiSquared.z !== 0) {\n      this.squaredXOverSquaredZ = this.radiiSquared.x / this.radiiSquared.z;\n    }\n\n    Object.freeze(this);\n  }\n\n  /** Compares this Ellipsoid against the provided Ellipsoid componentwise */\n  equals(right: Ellipsoid): boolean {\n    return this === right || Boolean(right && this.radii.equals(right.radii));\n  }\n\n  /** Creates a string representing this Ellipsoid in the format '(radii.x, radii.y, radii.z)'. */\n  toString(): string {\n    return this.radii.toString();\n  }\n\n  /** Converts the provided cartographic to Cartesian representation. */\n  cartographicToCartesian(cartographic: number[], result: Vector3): Vector3;\n  cartographicToCartesian(cartographic: number[], result?: number[]): number[];\n\n  cartographicToCartesian(cartographic, result = [0, 0, 0]) {\n    const normal = scratchNormal;\n    const k = scratchK;\n\n    const [, , height] = cartographic;\n    this.geodeticSurfaceNormalCartographic(cartographic, normal);\n    k.copy(this.radiiSquared).scale(normal);\n\n    const gamma = Math.sqrt(normal.dot(k));\n    k.scale(1 / gamma);\n\n    normal.scale(height);\n\n    k.add(normal);\n\n    return k.to(result);\n  }\n\n  /** Converts the provided cartesian to cartographic (lng/lat/z) representation.\n   * The cartesian is undefined at the center of the ellipsoid. */\n  cartesianToCartographic(cartesian: number[], result: Vector3): Vector3;\n  cartesianToCartographic(cartesian: number[], result?: number[]): number[];\n\n  cartesianToCartographic(cartesian, result = [0, 0, 0]) {\n    scratchCartesian.from(cartesian);\n    const point = this.scaleToGeodeticSurface(scratchCartesian, scratchPosition);\n\n    if (!point) {\n      return undefined;\n    }\n\n    const normal = this.geodeticSurfaceNormal(point, scratchNormal);\n\n    const h = scratchHeight;\n    h.copy(scratchCartesian).subtract(point);\n\n    const longitude = Math.atan2(normal.y, normal.x);\n    const latitude = Math.asin(normal.z);\n    const height = Math.sign(vec3.dot(h, scratchCartesian)) * vec3.length(h);\n\n    return toCartographicFromRadians([longitude, latitude, height], result);\n  }\n\n  /** Computes a 4x4 transformation matrix from a reference frame with an east-north-up axes\n   * centered at the provided origin to the provided ellipsoid's fixed reference frame. */\n  eastNorthUpToFixedFrame(origin: number[], result?: Matrix4): Matrix4;\n  eastNorthUpToFixedFrame(origin: number[], result: number[]): number[];\n\n  eastNorthUpToFixedFrame(origin, result = new Matrix4()) {\n    return localFrameToFixedFrame(this, 'east', 'north', 'up', origin, result);\n  }\n\n  /** Computes a 4x4 transformation matrix from a reference frame centered at\n   * the provided origin to the ellipsoid's fixed reference frame.\n   */\n  localFrameToFixedFrame(\n    firstAxis: string,\n    secondAxis: string,\n    thirdAxis: string,\n    origin: Readonly<NumericArray>,\n    result?: Matrix4\n  ): Matrix4;\n  localFrameToFixedFrame<Matrix4T>(\n    firstAxis: string,\n    secondAxis: string,\n    thirdAxis: string,\n    origin: Readonly<NumericArray>,\n    result: number[]\n  ): number[];\n\n  // Computes a 4x4 transformation matrix from a reference frame centered at\n  // the provided origin to the ellipsoid's fixed reference frame.\n  localFrameToFixedFrame(firstAxis, secondAxis, thirdAxis, origin, result = new Matrix4()) {\n    return localFrameToFixedFrame(this, firstAxis, secondAxis, thirdAxis, origin, result);\n  }\n\n  /** Computes the unit vector directed from the center of this ellipsoid toward\n   * the provided Cartesian position. */\n  geocentricSurfaceNormal(cartesian: number[], result?: number[]): number[];\n  geocentricSurfaceNormal<NumArray>(cartesian: number[], result: NumArray): NumArray;\n  geocentricSurfaceNormal(cartesian, result = [0, 0, 0]) {\n    return scratchVector.from(cartesian).normalize().to(result);\n  }\n\n  /** Computes the normal of the plane tangent to the surface of the ellipsoid at provided position. */\n  geodeticSurfaceNormalCartographic<NumArray>(cartographic: number[], result: NumArray): NumArray;\n  geodeticSurfaceNormalCartographic(cartographic: number[]): number[];\n  geodeticSurfaceNormalCartographic(cartographic, result = [0, 0, 0]) {\n    const cartographicVectorRadians = fromCartographicToRadians(cartographic);\n\n    const longitude = cartographicVectorRadians[0];\n    const latitude = cartographicVectorRadians[1];\n\n    const cosLatitude = Math.cos(latitude);\n\n    scratchVector\n      .set(cosLatitude * Math.cos(longitude), cosLatitude * Math.sin(longitude), Math.sin(latitude))\n      .normalize();\n\n    return scratchVector.to(result);\n  }\n\n  /** Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position. */\n  geodeticSurfaceNormal<NumArrayT>(cartesian: number[], result: NumArrayT): NumArrayT;\n  geodeticSurfaceNormal(cartesian: number[]): number[];\n  geodeticSurfaceNormal(cartesian, result = [0, 0, 0]) {\n    return scratchVector.from(cartesian).scale(this.oneOverRadiiSquared).normalize().to(result);\n  }\n\n  /** Scales the provided Cartesian position along the geodetic surface normal\n   * so that it is on the surface of this ellipsoid.  If the position is\n   * at the center of the ellipsoid, this function returns undefined. */\n  scaleToGeodeticSurface(cartesian: number[], result?: number[]): number[] {\n    return scaleToGeodeticSurface(cartesian, this, result);\n  }\n\n  /** Scales the provided Cartesian position along the geocentric surface normal\n   * so that it is on the surface of this ellipsoid. */\n  scaleToGeocentricSurface(cartesian: number[], result: number[] = [0, 0, 0]): number[] {\n    scratchPosition.from(cartesian);\n\n    const positionX = scratchPosition.x;\n    const positionY = scratchPosition.y;\n    const positionZ = scratchPosition.z;\n    const oneOverRadiiSquared = this.oneOverRadiiSquared;\n\n    const beta =\n      1.0 /\n      Math.sqrt(\n        positionX * positionX * oneOverRadiiSquared.x +\n          positionY * positionY * oneOverRadiiSquared.y +\n          positionZ * positionZ * oneOverRadiiSquared.z\n      );\n\n    return scratchPosition.multiplyScalar(beta).to(result);\n  }\n\n  /** Transforms a Cartesian X, Y, Z position to the ellipsoid-scaled space by multiplying\n   * its components by the result of `Ellipsoid#oneOverRadii` */\n  transformPositionToScaledSpace(position: number[], result: number[] = [0, 0, 0]): number[] {\n    return scratchPosition.from(position).scale(this.oneOverRadii).to(result);\n  }\n\n  /** Transforms a Cartesian X, Y, Z position from the ellipsoid-scaled space by multiplying\n   * its components by the result of `Ellipsoid#radii`. */\n  transformPositionFromScaledSpace(position: number[], result: number[] = [0, 0, 0]): number[] {\n    return scratchPosition.from(position).scale(this.radii).to(result);\n  }\n\n  /** Computes a point which is the intersection of the surface normal with the z-axis. */\n  getSurfaceNormalIntersectionWithZAxis(\n    position: number[],\n    buffer: number = 0,\n    result: number[] = [0, 0, 0]\n  ): number[] {\n    // Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)\n    assert(equals(this.radii.x, this.radii.y, _MathUtils.EPSILON15));\n    assert(this.radii.z > 0);\n\n    scratchPosition.from(position);\n    const z = scratchPosition.z * (1 - this.squaredXOverSquaredZ);\n\n    if (Math.abs(z) >= this.radii.z - buffer) {\n      return undefined;\n    }\n\n    return scratchPosition.set(0.0, 0.0, z).to(result);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}