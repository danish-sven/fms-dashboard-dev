{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { LayerExtension } from '@deck.gl/core';\nimport { shaderModule, shaderModule64 } from './shader-module';\nimport * as aggregator from './aggregator';\nimport { readPixelsToArray, clear } from '@luma.gl/core';\nconst defaultProps = {\n  getFilterValue: {\n    type: 'accessor',\n    value: 0\n  },\n  onFilteredItemsChange: {\n    type: 'function',\n    value: null,\n    optional: true\n  },\n  filterEnabled: true,\n  filterRange: [-1, 1],\n  filterSoftRange: null,\n  filterTransformSize: true,\n  filterTransformColor: true\n};\nconst DATA_TYPE_FROM_SIZE = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\nexport default class DataFilterExtension extends LayerExtension {\n  constructor() {\n    let {\n      filterSize = 1,\n      fp64 = false,\n      countItems = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!DATA_TYPE_FROM_SIZE[filterSize]) {\n      throw new Error('filterSize out of range');\n    }\n    super({\n      filterSize,\n      fp64,\n      countItems\n    });\n  }\n  getShaders(extension) {\n    const {\n      filterSize,\n      fp64\n    } = extension.opts;\n    return {\n      modules: [fp64 ? shaderModule64 : shaderModule],\n      defines: {\n        DATAFILTER_TYPE: DATA_TYPE_FROM_SIZE[filterSize],\n        DATAFILTER_DOUBLE: Boolean(fp64)\n      }\n    };\n  }\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        filterValues: {\n          size: extension.opts.filterSize,\n          type: extension.opts.fp64 ? 5130 : 5126,\n          accessor: 'getFilterValue',\n          shaderAttributes: {\n            filterValues: {\n              divisor: 0\n            },\n            instanceFilterValues: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n    const {\n      gl\n    } = this.context;\n    if (attributeManager && extension.opts.countItems) {\n      const useFloatTarget = aggregator.supportsFloatTarget(gl);\n      attributeManager.add({\n        filterIndices: {\n          size: useFloatTarget ? 1 : 2,\n          vertexOffset: 1,\n          type: 5121,\n          normalized: true,\n          accessor: (object, _ref) => {\n            let {\n              index\n            } = _ref;\n            const i = object && object.__source ? object.__source.index : index;\n            return useFloatTarget ? (i + 1) % 255 : [(i + 1) % 255, Math.floor(i / 255) % 255];\n          },\n          shaderAttributes: {\n            filterPrevIndices: {\n              vertexOffset: 0\n            },\n            filterIndices: {\n              vertexOffset: 1\n            }\n          }\n        }\n      });\n      const filterFBO = aggregator.getFramebuffer(gl, useFloatTarget);\n      const filterModel = aggregator.getModel(gl, extension.getShaders.call(this, extension), useFloatTarget);\n      this.setState({\n        filterFBO,\n        filterModel\n      });\n    }\n  }\n  updateState(_ref2) {\n    let {\n      props,\n      oldProps\n    } = _ref2;\n    if (this.state.filterModel) {\n      const attributeManager = this.getAttributeManager();\n      const filterNeedsUpdate = attributeManager.attributes.filterValues.needsUpdate() || props.filterEnabled !== oldProps.filterEnabled || props.filterRange !== oldProps.filterRange || props.filterSoftRange !== oldProps.filterSoftRange;\n      if (filterNeedsUpdate) {\n        this.setState({\n          filterNeedsUpdate\n        });\n      }\n    }\n  }\n  draw(params, extension) {\n    const {\n      filterFBO,\n      filterModel,\n      filterNeedsUpdate\n    } = this.state;\n    const {\n      onFilteredItemsChange\n    } = this.props;\n    if (filterNeedsUpdate && onFilteredItemsChange && filterModel) {\n      const {\n        attributes: {\n          filterValues,\n          filterIndices\n        }\n      } = this.getAttributeManager();\n      filterModel.setVertexCount(this.getNumInstances());\n      const {\n        gl\n      } = this.context;\n      clear(gl, {\n        framebuffer: filterFBO,\n        color: [0, 0, 0, 0]\n      });\n      filterModel.updateModuleSettings(params.moduleParameters).setAttributes({\n        ...filterValues.getShaderAttributes(),\n        ...(filterIndices && filterIndices.getShaderAttributes())\n      }).draw({\n        framebuffer: filterFBO,\n        parameters: {\n          ...aggregator.parameters,\n          viewport: [0, 0, filterFBO.width, filterFBO.height]\n        }\n      });\n      const color = readPixelsToArray(filterFBO);\n      let count = 0;\n      for (let i = 0; i < color.length; i++) {\n        count += color[i];\n      }\n      onFilteredItemsChange({\n        id: this.id,\n        count\n      });\n      this.state.filterNeedsUpdate = false;\n    }\n  }\n  finalizeState() {\n    const {\n      filterFBO,\n      filterModel\n    } = this.state;\n    if (filterFBO) {\n      filterFBO.color.delete();\n      filterFBO.delete();\n      filterModel.delete();\n    }\n  }\n}\n_defineProperty(DataFilterExtension, \"defaultProps\", defaultProps);\n_defineProperty(DataFilterExtension, \"extensionName\", 'DataFilterExtension');","map":{"version":3,"names":["LayerExtension","shaderModule","shaderModule64","aggregator","readPixelsToArray","clear","defaultProps","getFilterValue","type","value","onFilteredItemsChange","optional","filterEnabled","filterRange","filterSoftRange","filterTransformSize","filterTransformColor","DATA_TYPE_FROM_SIZE","DataFilterExtension","constructor","filterSize","fp64","countItems","arguments","length","undefined","Error","getShaders","extension","opts","modules","defines","DATAFILTER_TYPE","DATAFILTER_DOUBLE","Boolean","initializeState","context","attributeManager","getAttributeManager","add","filterValues","size","accessor","shaderAttributes","divisor","instanceFilterValues","gl","useFloatTarget","supportsFloatTarget","filterIndices","vertexOffset","normalized","object","_ref","index","i","__source","Math","floor","filterPrevIndices","filterFBO","getFramebuffer","filterModel","getModel","call","setState","updateState","_ref2","props","oldProps","state","filterNeedsUpdate","attributes","needsUpdate","draw","params","setVertexCount","getNumInstances","framebuffer","color","updateModuleSettings","moduleParameters","setAttributes","getShaderAttributes","parameters","viewport","width","height","count","id","finalizeState","delete"],"sources":["../../../src/data-filter/data-filter-extension.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\nimport {shaderModule, shaderModule64} from './shader-module';\nimport * as aggregator from './aggregator';\nimport {readPixelsToArray, clear} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nimport type {Layer, LayerContext, Accessor, UpdateParameters} from '@deck.gl/core';\n\nconst defaultProps = {\n  getFilterValue: {type: 'accessor', value: 0},\n  onFilteredItemsChange: {type: 'function', value: null, optional: true},\n\n  filterEnabled: true,\n  filterRange: [-1, 1],\n  filterSoftRange: null,\n  filterTransformSize: true,\n  filterTransformColor: true\n};\n\nexport type DataFilterExtensionProps<DataT = any> = {\n  /**\n   * Accessor to retrieve the value for each object that it will be filtered by.\n   * Returns either a number (if `filterSize: 1`) or an array of numbers.\n   */\n  getFilterValue?: Accessor<DataT, number | number[]>;\n  /**\n   * Enable/disable the data filter. If the data filter is disabled, all objects are rendered.\n   * @default true\n   */\n  filterEnabled?: boolean;\n  /**\n   * The [min, max] bounds which defines whether an object should be rendered.\n   * If an object's filtered value is within the bounds, the object will be rendered; otherwise it will be hidden.\n   * @default [-1, 1]\n   */\n  filterRange?: [number, number] | [number, number][];\n  /**\n   * If specified, objects will be faded in/out instead of abruptly shown/hidden.\n   * When the filtered value is outside of the bounds defined by `filterSoftRange` but still within the bounds defined by `filterRange`, the object will be rendered as \"faded.\"\n   * @default null\n   */\n  filterSoftRange?: [number, number] | [number, number][] | null;\n  /**\n   * When an object is \"faded\", manipulate its size so that it appears smaller or thinner. Only works if `filterSoftRange` is specified.\n   * @default true\n   */\n  filterTransformSize?: boolean;\n  /**\n   * When an object is \"faded\", manipulate its opacity so that it appears more translucent. Only works if `filterSoftRange` is specified.\n   * @default true\n   */\n  filterTransformColor?: boolean;\n  /**\n   * Only called if the `countItems` option is enabled.\n   */\n  onFilteredItemsChange?: (evt: {\n    /** The id of the source layer. */\n    id: string;\n    /** The number of data objects that pass the filter. */\n    count: number;\n  }) => void;\n};\n\ntype DataFilterExtensionOptions = {\n  /**\n   * The size of the filter (number of columns to filter by). The data filter can show/hide data based on 1-4 numeric properties of each object.\n   * @default 1\n   */\n  filterSize: number;\n  /**\n   * Use 64-bit precision instead of 32-bit.\n   * @default false\n   */\n  fp64: boolean;\n  /**\n   * If `true`, reports the number of filtered objects with the `onFilteredItemsChange` callback.\n   * @default `false`.\n   */\n  countItems: boolean;\n};\n\nconst DATA_TYPE_FROM_SIZE = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\n\n/** Adds GPU-based data filtering functionalities to layers. It allows the layer to show/hide objects based on user-defined properties. */\nexport default class DataFilterExtension extends LayerExtension<DataFilterExtensionOptions> {\n  static defaultProps = defaultProps;\n  static extensionName = 'DataFilterExtension';\n\n  constructor({\n    filterSize = 1,\n    fp64 = false,\n    countItems = false\n  }: Partial<DataFilterExtensionOptions> = {}) {\n    if (!DATA_TYPE_FROM_SIZE[filterSize]) {\n      throw new Error('filterSize out of range');\n    }\n\n    super({filterSize, fp64, countItems});\n  }\n\n  getShaders(this: Layer<DataFilterExtensionProps>, extension: this): any {\n    const {filterSize, fp64} = extension.opts;\n\n    return {\n      modules: [fp64 ? shaderModule64 : shaderModule],\n      defines: {\n        DATAFILTER_TYPE: DATA_TYPE_FROM_SIZE[filterSize],\n        DATAFILTER_DOUBLE: Boolean(fp64)\n      }\n    };\n  }\n\n  initializeState(this: Layer<DataFilterExtensionProps>, context: LayerContext, extension: this) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        filterValues: {\n          size: extension.opts.filterSize,\n          type: extension.opts.fp64 ? GL.DOUBLE : GL.FLOAT,\n          accessor: 'getFilterValue',\n          shaderAttributes: {\n            filterValues: {\n              divisor: 0\n            },\n            instanceFilterValues: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    const {gl} = this.context;\n    if (attributeManager && extension.opts.countItems) {\n      const useFloatTarget = aggregator.supportsFloatTarget(gl);\n      // This attribute is needed for variable-width data, e.g. Path, SolidPolygon, Text\n      // The vertex shader checks if a vertex has the same \"index\" as the previous vertex\n      // so that we only write one count cross multiple vertices of the same object\n      attributeManager.add({\n        filterIndices: {\n          size: useFloatTarget ? 1 : 2,\n          vertexOffset: 1,\n          type: GL.UNSIGNED_BYTE,\n          normalized: true,\n          accessor: (object, {index}) => {\n            const i = object && object.__source ? object.__source.index : index;\n            return useFloatTarget ? (i + 1) % 255 : [(i + 1) % 255, Math.floor(i / 255) % 255];\n          },\n          shaderAttributes: {\n            filterPrevIndices: {\n              vertexOffset: 0\n            },\n            filterIndices: {\n              vertexOffset: 1\n            }\n          }\n        }\n      });\n\n      const filterFBO = aggregator.getFramebuffer(gl, useFloatTarget);\n      const filterModel = aggregator.getModel(\n        gl,\n        extension.getShaders.call(this, extension),\n        useFloatTarget\n      );\n      this.setState({filterFBO, filterModel});\n    }\n  }\n\n  updateState(\n    this: Layer<DataFilterExtensionProps>,\n    {props, oldProps}: UpdateParameters<Layer<DataFilterExtensionProps>>\n  ) {\n    if (this.state.filterModel) {\n      const attributeManager = this.getAttributeManager();\n      const filterNeedsUpdate =\n        // attributeManager must be defined for filterModel to be set\n        attributeManager!.attributes.filterValues.needsUpdate() ||\n        props.filterEnabled !== oldProps.filterEnabled ||\n        props.filterRange !== oldProps.filterRange ||\n        props.filterSoftRange !== oldProps.filterSoftRange;\n      if (filterNeedsUpdate) {\n        this.setState({filterNeedsUpdate});\n      }\n    }\n  }\n\n  draw(this: Layer<DataFilterExtensionProps>, params: any, extension: this) {\n    const {filterFBO, filterModel, filterNeedsUpdate} = this.state;\n    const {onFilteredItemsChange} = this.props;\n    if (filterNeedsUpdate && onFilteredItemsChange && filterModel) {\n      const {\n        attributes: {filterValues, filterIndices}\n      } = this.getAttributeManager()!;\n      filterModel.setVertexCount(this.getNumInstances());\n\n      const {gl} = this.context;\n      clear(gl, {framebuffer: filterFBO, color: [0, 0, 0, 0]});\n\n      filterModel\n        .updateModuleSettings(params.moduleParameters)\n        .setAttributes({\n          ...filterValues.getShaderAttributes(),\n          ...(filterIndices && filterIndices.getShaderAttributes())\n        })\n        .draw({\n          framebuffer: filterFBO,\n          parameters: {\n            ...aggregator.parameters,\n            viewport: [0, 0, filterFBO.width, filterFBO.height]\n          }\n        });\n      const color = readPixelsToArray(filterFBO);\n      let count = 0;\n      for (let i = 0; i < color.length; i++) {\n        count += color[i];\n      }\n      onFilteredItemsChange({id: this.id, count});\n\n      this.state.filterNeedsUpdate = false;\n    }\n  }\n\n  finalizeState(this: Layer<DataFilterExtensionProps>) {\n    const {filterFBO, filterModel} = this.state;\n    if (filterFBO) {\n      filterFBO.color.delete();\n      filterFBO.delete();\n      filterModel.delete();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}