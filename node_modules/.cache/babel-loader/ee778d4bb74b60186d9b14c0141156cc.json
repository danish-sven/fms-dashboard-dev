{"ast":null,"code":"import Stat from \"./stat.js\";\nexport default class Stats {\n  constructor(options) {\n    this.id = void 0;\n    this.stats = {};\n    this.id = options.id;\n    this.stats = {};\n    this._initializeStats(options.stats);\n    Object.seal(this);\n  }\n  get(name) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'count';\n    return this._getOrCreate({\n      name,\n      type\n    });\n  }\n  get size() {\n    return Object.keys(this.stats).length;\n  }\n  reset() {\n    for (const stat of Object.values(this.stats)) {\n      stat.reset();\n    }\n    return this;\n  }\n  forEach(fn) {\n    for (const stat of Object.values(this.stats)) {\n      fn(stat);\n    }\n  }\n  getTable() {\n    const table = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n    return table;\n  }\n  _initializeStats() {\n    let stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n  _getOrCreate(stat) {\n    const {\n      name,\n      type\n    } = stat;\n    let result = this.stats[name];\n    if (!result) {\n      if (stat instanceof Stat) {\n        result = stat;\n      } else {\n        result = new Stat(name, type);\n      }\n      this.stats[name] = result;\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["Stat","Stats","constructor","options","id","stats","_initializeStats","Object","seal","get","name","type","arguments","length","undefined","_getOrCreate","size","keys","reset","stat","values","forEach","fn","getTable","table","time","count","average","getAverageTime","hz","getHz","result"],"sources":["../../src/lib/stats.ts"],"sourcesContent":["// probe.gl, MIT license\n\nimport Stat from './stat';\n\ntype TableEntry = {\n  time: number;\n  count: number;\n  average: number;\n  hz: number;\n};\n\n/** A \"bag\" of `Stat` objects, can be visualized using `StatsWidget` */\nexport default class Stats {\n  readonly id: string;\n  readonly stats: Record<string, Stat> = {};\n\n  constructor(options: {id: string; stats?: Stats | Stat[] | {name: string; type?: string}[]}) {\n    this.id = options.id;\n    this.stats = {};\n\n    this._initializeStats(options.stats);\n\n    Object.seal(this);\n  }\n\n  /** Acquire a stat. Create if it doesn't exist. */\n  get(name: string, type: string = 'count'): Stat {\n    return this._getOrCreate({name, type});\n  }\n\n  get size(): number {\n    return Object.keys(this.stats).length;\n  }\n\n  /** Reset all stats */\n  reset(): this {\n    for (const stat of Object.values(this.stats)) {\n      stat.reset();\n    }\n\n    return this;\n  }\n\n  forEach(fn: (stat: Stat) => void): void {\n    for (const stat of Object.values(this.stats)) {\n      fn(stat);\n    }\n  }\n\n  getTable(): Record<string, TableEntry> {\n    const table: Record<string, TableEntry> = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n\n    return table;\n  }\n\n  _initializeStats(stats: Stats | Stat[] | {name: string; type?: string}[] = []): void {\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n\n  _getOrCreate(stat: Stat | {name: string, type?: string}): Stat {\n    const {name, type} = stat;\n    let result = this.stats[name];\n    if (!result) {\n      if (stat instanceof Stat) {\n        result = stat;\n      } else {\n        result = new Stat(name, type);\n      }\n      this.stats[name] = result;\n    }\n    return result;\n  }\n}\n"],"mappings":"OAEOA,I;AAUP,eAAe,MAAMC,KAAN,CAAY;EAIzBC,WAAWA,CAACC,OAAD,EAAkF;IAAA,KAHpFC,EAGoF;IAAA,KAFpFC,KAEoF,GAFtD,EAEsD;IAC3F,KAAKD,EAAL,GAAUD,OAAO,CAACC,EAAlB;IACA,KAAKC,KAAL,GAAa,EAAb;IAEA,KAAKC,gBAAL,CAAsBH,OAAO,CAACE,KAA9B;IAEAE,MAAM,CAACC,IAAP,CAAY,IAAZ;EACD;EAGDC,GAAGA,CAACC,IAAD,EAA6C;IAAA,IAA9BC,IAA8B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAf,OAAe;IAC9C,OAAO,KAAKG,YAAL,CAAkB;MAACL,IAAD;MAAOC;IAAP,CAAlB,CAAP;EACD;EAEO,IAAJK,IAAIA,CAAA,EAAW;IACjB,OAAOT,MAAM,CAACU,IAAP,CAAY,KAAKZ,KAAjB,EAAwBQ,MAA/B;EACD;EAGDK,KAAKA,CAAA,EAAS;IACZ,KAAK,MAAMC,IAAX,IAAmBZ,MAAM,CAACa,MAAP,CAAc,KAAKf,KAAnB,CAAnB,EAA8C;MAC5Cc,IAAI,CAACD,KAAL;IACD;IAED,OAAO,IAAP;EACD;EAEDG,OAAOA,CAACC,EAAD,EAAiC;IACtC,KAAK,MAAMH,IAAX,IAAmBZ,MAAM,CAACa,MAAP,CAAc,KAAKf,KAAnB,CAAnB,EAA8C;MAC5CiB,EAAE,CAACH,IAAD,CAAF;IACD;EACF;EAEDI,QAAQA,CAAA,EAA+B;IACrC,MAAMC,KAAiC,GAAG,EAA1C;IACA,KAAKH,OAAL,CAAaF,IAAI,IAAI;MACnBK,KAAK,CAACL,IAAI,CAACT,IAAN,CAAL,GAAmB;QACjBe,IAAI,EAAEN,IAAI,CAACM,IAAL,IAAa,CADF;QAEjBC,KAAK,EAAEP,IAAI,CAACO,KAAL,IAAc,CAFJ;QAGjBC,OAAO,EAAER,IAAI,CAACS,cAAL,MAAyB,CAHjB;QAIjBC,EAAE,EAAEV,IAAI,CAACW,KAAL,MAAgB;MAJH,CAAnB;IAMD,CAPD;IASA,OAAON,KAAP;EACD;EAEDlB,gBAAgBA,CAAA,EAAqE;IAAA,IAApED,KAAoE,GAAAO,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAV,EAAU;IACnFP,KAAK,CAACgB,OAAN,CAAcF,IAAI,IAAI,KAAKJ,YAAL,CAAkBI,IAAlB,CAAtB;EACD;EAEDJ,YAAYA,CAACI,IAAD,EAAmD;IAC7D,MAAM;MAACT,IAAD;MAAOC;IAAP,IAAeQ,IAArB;IACA,IAAIY,MAAM,GAAG,KAAK1B,KAAL,CAAWK,IAAX,CAAb;IACA,IAAI,CAACqB,MAAL,EAAa;MACX,IAAIZ,IAAI,YAAYnB,IAApB,EAA0B;QACxB+B,MAAM,GAAGZ,IAAT;MACD,CAFD,MAEO;QACLY,MAAM,GAAG,IAAI/B,IAAJ,CAASU,IAAT,EAAeC,IAAf,CAAT;MACD;MACD,KAAKN,KAAL,CAAWK,IAAX,IAAmBqB,MAAnB;IACD;IACD,OAAOA,MAAP;EACD;AAnEwB"},"metadata":{},"sourceType":"module"}