{"ast":null,"code":"import { Vector3, Matrix4 } from '@math.gl/core';\nimport { assert, uid } from '@luma.gl/webgl';\nexport default class ScenegraphNode {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      id\n    } = props;\n    this.id = id || uid(this.constructor.name);\n    this.display = true;\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n    this.props = {};\n    this._setScenegraphNodeProps(props);\n  }\n  delete() {}\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n    return this;\n  }\n  toString() {\n    return \"{type: ScenegraphNode, id: \".concat(this.id, \")}\");\n  }\n  getBounds() {\n    return null;\n  }\n  setPosition(position) {\n    assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n  setRotation(rotation) {\n    assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n  setScale(scale) {\n    assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n  setMatrix(matrix) {\n    let copyMatrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n  setMatrixComponents(_ref) {\n    let {\n      position,\n      rotation,\n      scale,\n      update = true\n    } = _ref;\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n  update() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      position,\n      rotation,\n      scale\n    } = options;\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n  _setScenegraphNodeProps(props) {\n    if ('display' in props) {\n      this.display = props.display;\n    }\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n    Object.assign(this.props, props);\n  }\n}","map":{"version":3,"names":["Vector3","Matrix4","assert","uid","ScenegraphNode","constructor","props","arguments","length","undefined","id","name","display","position","rotation","scale","matrix","userData","_setScenegraphNodeProps","delete","setProps","toString","concat","getBounds","setPosition","setRotation","setScale","setMatrix","copyMatrix","copy","setMatrixComponents","_ref","update","updateMatrix","pos","rot","identity","translate","rotateXYZ","options","getCoordinateUniforms","viewMatrix","modelMatrix","worldMatrix","multiplyRight","worldInverse","invert","worldInverseTranspose","transpose","objectMatrix","worldInverseMatrix","worldInverseTransposeMatrix","Object","assign"],"sources":["../../../src/scenegraph/scenegraph-node.js"],"sourcesContent":["import {Vector3, Matrix4} from '@math.gl/core';\nimport {assert, uid} from '@luma.gl/webgl';\n\nexport default class ScenegraphNode {\n  constructor(props = {}) {\n    const {id} = props;\n\n    this.id = id || uid(this.constructor.name);\n\n    this.display = true; // whether to display the object at all\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n\n    this.props = {};\n    this._setScenegraphNodeProps(props);\n  }\n\n  delete() {}\n\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n    return this;\n  }\n\n  toString() {\n    return `{type: ScenegraphNode, id: ${this.id})}`;\n  }\n\n  getBounds() {\n    return null;\n  }\n\n  setPosition(position) {\n    assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation) {\n    assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale) {\n    assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrix(matrix, copyMatrix = true) {\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n\n  setMatrixComponents({position, rotation, scale, update = true}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update(options = {}) {\n    const {position, rotation, scale} = options;\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    // TODO - solve multiple class problem\n    // assert(viewMatrix instanceof Matrix4);\n    assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  // TODO - copied code, not yet vetted\n  /*\n  transform() {\n    if (!this.parent) {\n      this.endPosition.set(this.position);\n      this.endRotation.set(this.rotation);\n      this.endScale.set(this.scale);\n    } else {\n      const parent = this.parent;\n      this.endPosition.set(this.position.add(parent.endPosition));\n      this.endRotation.set(this.rotation.add(parent.endRotation));\n      this.endScale.set(this.scale.add(parent.endScale));\n    }\n\n    const ch = this.children;\n    for (let i = 0; i < ch.length; ++i) {\n      ch[i].transform();\n    }\n\n    return this;\n  }\n  */\n\n  _setScenegraphNodeProps(props) {\n    if ('display' in props) {\n      this.display = props.display;\n    }\n\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n\n    // Matrix overwrites other props\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n\n    Object.assign(this.props, props);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}