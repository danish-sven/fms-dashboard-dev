{"ast":null,"code":"import { Matrix4, Vector3 } from '@math.gl/core';\nimport { log } from '@luma.gl/webgl';\nimport ScenegraphNode from './scenegraph-node';\nexport default class GroupNode extends ScenegraphNode {\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    props = Array.isArray(props) ? {\n      children: props\n    } : props;\n    const {\n      children = []\n    } = props;\n    log.assert(children.every(child => child instanceof ScenegraphNode), 'every child must an instance of ScenegraphNode');\n    super(props);\n    this.children = children;\n  }\n  add() {\n    for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {\n      children[_key] = arguments[_key];\n    }\n    for (const child of children) {\n      if (Array.isArray(child)) {\n        this.add(...child);\n      } else {\n        this.children.push(child);\n      }\n    }\n    return this;\n  }\n  remove(child) {\n    const children = this.children;\n    const indexOf = children.indexOf(child);\n    if (indexOf > -1) {\n      children.splice(indexOf, 1);\n    }\n    return this;\n  }\n  removeAll() {\n    this.children = [];\n    return this;\n  }\n  delete() {\n    this.children.forEach(child => child.delete());\n    this.removeAll();\n    super.delete();\n  }\n  getBounds() {\n    const result = [[Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]];\n    this.traverse((node, _ref) => {\n      let {\n        worldMatrix\n      } = _ref;\n      const bounds = node.getBounds();\n      if (!bounds) {\n        return;\n      }\n      const [min, max] = bounds;\n      const center = new Vector3(min).add(max).divide([2, 2, 2]);\n      worldMatrix.transformAsPoint(center, center);\n      const halfSize = new Vector3(max).subtract(min).divide([2, 2, 2]);\n      worldMatrix.transformAsVector(halfSize, halfSize);\n      for (let v = 0; v < 8; v++) {\n        const position = new Vector3(v & 0b001 ? -1 : 1, v & 0b010 ? -1 : 1, v & 0b100 ? -1 : 1).multiply(halfSize).add(center);\n        for (let i = 0; i < 3; i++) {\n          result[0][i] = Math.min(result[0][i], position[i]);\n          result[1][i] = Math.max(result[1][i], position[i]);\n        }\n      }\n    });\n    if (!Number.isFinite(result[0][0])) {\n      return null;\n    }\n    return result;\n  }\n  traverse(visitor) {\n    let {\n      worldMatrix = new Matrix4()\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const modelMatrix = new Matrix4(worldMatrix).multiplyRight(this.matrix);\n    for (const child of this.children) {\n      if (child instanceof GroupNode) {\n        child.traverse(visitor, {\n          worldMatrix: modelMatrix\n        });\n      } else {\n        visitor(child, {\n          worldMatrix: modelMatrix\n        });\n      }\n    }\n  }\n}","map":{"version":3,"names":["Matrix4","Vector3","log","ScenegraphNode","GroupNode","constructor","props","arguments","length","undefined","Array","isArray","children","assert","every","child","add","_len","_key","push","remove","indexOf","splice","removeAll","delete","forEach","getBounds","result","Infinity","traverse","node","_ref","worldMatrix","bounds","min","max","center","divide","transformAsPoint","halfSize","subtract","transformAsVector","v","position","multiply","i","Math","Number","isFinite","visitor","modelMatrix","multiplyRight","matrix"],"sources":["../../../src/scenegraph/group-node.js"],"sourcesContent":["import {Matrix4, Vector3} from '@math.gl/core';\nimport {log} from '@luma.gl/webgl';\nimport ScenegraphNode from './scenegraph-node';\n\nexport default class GroupNode extends ScenegraphNode {\n  constructor(props = {}) {\n    props = Array.isArray(props) ? {children: props} : props;\n    const {children = []} = props;\n    log.assert(\n      children.every(child => child instanceof ScenegraphNode),\n      'every child must an instance of ScenegraphNode'\n    );\n    super(props);\n    this.children = children;\n  }\n\n  // Unpacks arrays and nested arrays of children\n  add(...children) {\n    for (const child of children) {\n      if (Array.isArray(child)) {\n        this.add(...child);\n      } else {\n        this.children.push(child);\n      }\n    }\n    return this;\n  }\n\n  remove(child) {\n    const children = this.children;\n    const indexOf = children.indexOf(child);\n    if (indexOf > -1) {\n      children.splice(indexOf, 1);\n    }\n    return this;\n  }\n\n  removeAll() {\n    this.children = [];\n    return this;\n  }\n\n  delete() {\n    this.children.forEach(child => child.delete());\n    this.removeAll();\n    super.delete();\n  }\n\n  getBounds() {\n    /** @type [number[], number[]] */\n    const result = [[Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]];\n\n    this.traverse((node, {worldMatrix}) => {\n      const bounds = node.getBounds();\n      if (!bounds) {\n        return;\n      }\n      const [min, max] = bounds;\n      const center = new Vector3(min).add(max).divide([2, 2, 2]);\n      worldMatrix.transformAsPoint(center, center);\n      const halfSize = new Vector3(max).subtract(min).divide([2, 2, 2]);\n      worldMatrix.transformAsVector(halfSize, halfSize);\n\n      for (let v = 0; v < 8; v++) {\n        // Test all 8 corners of the box\n        const position = new Vector3(v & 0b001 ? -1 : 1, v & 0b010 ? -1 : 1, v & 0b100 ? -1 : 1)\n          .multiply(halfSize)\n          .add(center);\n\n        for (let i = 0; i < 3; i++) {\n          result[0][i] = Math.min(result[0][i], position[i]);\n          result[1][i] = Math.max(result[1][i], position[i]);\n        }\n      }\n    });\n    if (!Number.isFinite(result[0][0])) {\n      return null;\n    }\n    return result;\n  }\n\n  traverse(visitor, {worldMatrix = new Matrix4()} = {}) {\n    const modelMatrix = new Matrix4(worldMatrix).multiplyRight(this.matrix);\n\n    for (const child of this.children) {\n      if (child instanceof GroupNode) {\n        child.traverse(visitor, {worldMatrix: modelMatrix});\n      } else {\n        visitor(child, {worldMatrix: modelMatrix});\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}