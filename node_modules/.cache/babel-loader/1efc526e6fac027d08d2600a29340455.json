{"ast":null,"code":"import { Buffer, Texture2D, assert } from '@luma.gl/webgl';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { Transform } from '@luma.gl/engine';\nimport { default as textureFilterModule } from './texture-filter';\nimport { POLY_TEX_VS, FILTER_VS } from './shaders';\nimport * as Polygon from './polygon';\nconst TEXTURE_SIZE = 512;\nexport default class GPUPointInPolygon {\n  constructor(gl) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.gl = gl;\n    assert(isWebGL2(gl));\n    this.textureSize = TEXTURE_SIZE;\n    this._setupResources();\n    this.update(opts);\n  }\n  update() {\n    let {\n      polygons,\n      textureSize\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (textureSize) {\n      this.textureSize = textureSize;\n    }\n    if (!polygons || polygons.length === 0) {\n      return;\n    }\n    const {\n      vertices,\n      indices,\n      vertexCount,\n      ids\n    } = triangulatePolygons(polygons);\n    this._updateResources(vertices, indices, ids, vertexCount);\n  }\n  filter(_ref) {\n    let {\n      positionBuffer,\n      filterValueIndexBuffer,\n      count\n    } = _ref;\n    this.filterTransform.update({\n      sourceBuffers: {\n        a_position: positionBuffer\n      },\n      feedbackBuffers: {\n        filterValueIndex: filterValueIndexBuffer\n      },\n      elementCount: count\n    });\n    const {\n      polygonTexture,\n      boundingBox\n    } = this;\n    this.filterTransform.run({\n      moduleSettings: {\n        boundingBox,\n        texture: polygonTexture\n      }\n    });\n  }\n  _setupResources() {\n    const {\n      gl\n    } = this;\n    this.polygonTexture = new Texture2D(gl, {\n      format: 6407,\n      type: 5121,\n      dataFormat: 6407,\n      border: 0,\n      mipmaps: false,\n      parameters: {\n        [10240]: 9728,\n        [10241]: 9728,\n        [10242]: 33071,\n        [10243]: 33071\n      }\n    });\n    this.positionBuffer = new Buffer(gl, {\n      accessor: {\n        type: 5126,\n        size: 2\n      }\n    });\n    this.idBuffer = new Buffer(gl, {\n      accessor: {\n        type: 5126,\n        size: 1\n      }\n    });\n    this.indexBuffer = new Buffer(gl, {\n      target: 34963,\n      accessor: {\n        type: 5123\n      }\n    });\n    this.polyTextureTransform = new Transform(gl, {\n      id: \"polygon-texture-creation-transform\",\n      elementCount: 0,\n      _targetTexture: this.polygonTexture,\n      _targetTextureVarying: 'v_polygonColor',\n      vs: POLY_TEX_VS,\n      drawMode: 4,\n      isIndexed: true,\n      sourceBuffers: {\n        a_position: this.positionBuffer,\n        a_polygonID: this.idBuffer,\n        indices: this.indexBuffer\n      }\n    });\n    this.filterTransform = new Transform(gl, {\n      id: 'filter transform',\n      vs: FILTER_VS,\n      modules: [textureFilterModule],\n      varyings: ['filterValueIndex']\n    });\n  }\n  _updateResources(vertices, indices, ids, vertexCount) {\n    const boundingBox = getBoundingBox(vertices, vertexCount);\n    const [xMin, yMin, xMax, yMax] = boundingBox;\n    const width = xMax - xMin;\n    const height = yMax - yMin;\n    const whRatio = width / height;\n    const {\n      textureSize\n    } = this;\n    let texWidth = textureSize;\n    let texHeight = textureSize;\n    if (whRatio > 1) {\n      texHeight = texWidth / whRatio;\n    } else {\n      texWidth = texHeight * whRatio;\n    }\n    this.boundingBox = boundingBox;\n    this.polygonTexture.resize({\n      width: texWidth,\n      height: texHeight,\n      mipmaps: false\n    });\n    this.positionBuffer.setData(new Float32Array(vertices));\n    this.idBuffer.setData(new Float32Array(ids));\n    this.indexBuffer.setData(new Uint16Array(indices));\n    this.polyTextureTransform.update({\n      elementCount: indices.length,\n      _targetTexture: this.polygonTexture\n    });\n    this.polyTextureTransform.run({\n      uniforms: {\n        boundingBoxOriginSize: [xMin, yMin, width, height]\n      }\n    });\n  }\n}\nfunction getBoundingBox(positions, vertexCount) {\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n  for (let i = 0; i < vertexCount; i++) {\n    x = positions[i * 2];\n    y = positions[i * 2 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n  return [xMin, yMin, xMax, yMax];\n}\nfunction triangulatePolygons(polygons) {\n  const SIZE = 2;\n  const vertices = [];\n  const indices = [];\n  const ids = [];\n  let count = 0;\n  let polygonId = 0;\n  for (let i = 0; i < polygons.length; i++) {\n    const normalized = Polygon.normalize(polygons[i], SIZE);\n    const curVertices = normalized.positions || normalized;\n    const curCount = curVertices.length / SIZE;\n    const curIds = new Array(curCount).fill(polygonId);\n    vertices.push(...curVertices);\n    ids.push(...curIds);\n    const curIndices = Polygon.getSurfaceIndices(normalized, SIZE);\n    const indexCount = curIndices.length;\n    for (let j = 0; j < indexCount; j++) {\n      curIndices[j] += count;\n    }\n    count += curCount;\n    indices.push(...curIndices);\n    polygonId++;\n  }\n  assert(count < 65536);\n  const vertexCount = Polygon.getVertexCount(vertices, SIZE);\n  return {\n    vertices,\n    indices,\n    ids,\n    vertexCount\n  };\n}","map":{"version":3,"names":["Buffer","Texture2D","assert","isWebGL2","Transform","default","textureFilterModule","POLY_TEX_VS","FILTER_VS","Polygon","TEXTURE_SIZE","GPUPointInPolygon","constructor","gl","opts","arguments","length","undefined","textureSize","_setupResources","update","polygons","vertices","indices","vertexCount","ids","triangulatePolygons","_updateResources","filter","_ref","positionBuffer","filterValueIndexBuffer","count","filterTransform","sourceBuffers","a_position","feedbackBuffers","filterValueIndex","elementCount","polygonTexture","boundingBox","run","moduleSettings","texture","format","type","dataFormat","border","mipmaps","parameters","accessor","size","idBuffer","indexBuffer","target","polyTextureTransform","id","_targetTexture","_targetTextureVarying","vs","drawMode","isIndexed","a_polygonID","modules","varyings","getBoundingBox","xMin","yMin","xMax","yMax","width","height","whRatio","texWidth","texHeight","resize","setData","Float32Array","Uint16Array","uniforms","boundingBoxOriginSize","positions","Infinity","y","x","i","SIZE","polygonId","normalized","normalize","curVertices","curCount","curIds","Array","fill","push","curIndices","getSurfaceIndices","indexCount","j","getVertexCount"],"sources":["../../../../src/gpgpu/point-in-polygon/gpu-point-in-polygon.js"],"sourcesContent":["// @ts-nocheck TODO remove\n\nimport GL from '@luma.gl/constants';\nimport {Buffer, Texture2D, assert} from '@luma.gl/webgl';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {Transform} from '@luma.gl/engine';\nimport {default as textureFilterModule} from './texture-filter';\nimport {POLY_TEX_VS, FILTER_VS} from './shaders';\nimport * as Polygon from './polygon';\nconst TEXTURE_SIZE = 512;\n\nexport default class GPUPointInPolygon {\n  constructor(gl, opts = {}) {\n    this.gl = gl;\n    assert(isWebGL2(gl)); // supports WebGL2 only\n    this.textureSize = TEXTURE_SIZE;\n    this._setupResources();\n    this.update(opts);\n  }\n\n  update({polygons, textureSize} = {}) {\n    if (textureSize) {\n      this.textureSize = textureSize;\n    }\n    if (!polygons || polygons.length === 0) {\n      return;\n    }\n\n    const {vertices, indices, vertexCount, ids} = triangulatePolygons(polygons);\n    this._updateResources(vertices, indices, ids, vertexCount);\n  }\n\n  filter({positionBuffer, filterValueIndexBuffer, count}) {\n    this.filterTransform.update({\n      sourceBuffers: {\n        a_position: positionBuffer\n      },\n      feedbackBuffers: {\n        filterValueIndex: filterValueIndexBuffer\n      },\n      elementCount: count\n    });\n    const {polygonTexture, boundingBox} = this;\n\n    this.filterTransform.run({\n      moduleSettings: {boundingBox, texture: polygonTexture}\n    });\n  }\n\n  // PRIVATE\n\n  _setupResources() {\n    const {gl} = this;\n\n    // texture to render polygons to\n    this.polygonTexture = new Texture2D(gl, {\n      format: GL.RGB,\n      type: GL.UNSIGNED_BYTE,\n      dataFormat: GL.RGB,\n      border: 0,\n      mipmaps: false,\n      parameters: {\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n    this.positionBuffer = new Buffer(gl, {accessor: {type: GL.FLOAT, size: 2}});\n    this.idBuffer = new Buffer(gl, {accessor: {type: GL.FLOAT, size: 1}});\n    this.indexBuffer = new Buffer(gl, {\n      target: GL.ELEMENT_ARRAY_BUFFER,\n      accessor: {type: GL.UNSIGNED_SHORT}\n    });\n\n    // transform to generate polygon texture\n    this.polyTextureTransform = new Transform(gl, {\n      id: `polygon-texture-creation-transform`,\n      elementCount: 0,\n      _targetTexture: this.polygonTexture,\n      _targetTextureVarying: 'v_polygonColor',\n      vs: POLY_TEX_VS,\n      drawMode: GL.TRIANGLES,\n      isIndexed: true,\n      sourceBuffers: {\n        a_position: this.positionBuffer,\n        a_polygonID: this.idBuffer,\n        indices: this.indexBuffer\n      }\n    });\n\n    // transform to perform filtering\n    this.filterTransform = new Transform(gl, {\n      id: 'filter transform',\n      vs: FILTER_VS,\n      modules: [textureFilterModule],\n      varyings: ['filterValueIndex']\n    });\n  }\n\n  _updateResources(vertices, indices, ids, vertexCount) {\n    const boundingBox = getBoundingBox(vertices, vertexCount);\n    const [xMin, yMin, xMax, yMax] = boundingBox;\n    const width = xMax - xMin;\n    const height = yMax - yMin;\n    const whRatio = width / height;\n    const {textureSize} = this;\n\n    // calculate max texture size with same aspect ratio\n    let texWidth = textureSize;\n    let texHeight = textureSize;\n    if (whRatio > 1) {\n      texHeight = texWidth / whRatio;\n    } else {\n      texWidth = texHeight * whRatio;\n    }\n\n    this.boundingBox = boundingBox;\n    this.polygonTexture.resize({width: texWidth, height: texHeight, mipmaps: false});\n    this.positionBuffer.setData(new Float32Array(vertices));\n    this.idBuffer.setData(new Float32Array(ids));\n    this.indexBuffer.setData(new Uint16Array(indices));\n    this.polyTextureTransform.update({\n      elementCount: indices.length,\n      _targetTexture: this.polygonTexture\n    });\n\n    this.polyTextureTransform.run({\n      uniforms: {\n        boundingBoxOriginSize: [xMin, yMin, width, height]\n      }\n    });\n  }\n}\n\n// Helper methods\n\nfunction getBoundingBox(positions, vertexCount) {\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < vertexCount; i++) {\n    x = positions[i * 2];\n    y = positions[i * 2 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n\n  return [xMin, yMin, xMax, yMax];\n}\n\nfunction triangulatePolygons(polygons) {\n  const SIZE = 2;\n  const vertices = [];\n  const indices = [];\n  const ids = [];\n  let count = 0;\n  let polygonId = 0;\n  for (let i = 0; i < polygons.length; i++) {\n    const normalized = Polygon.normalize(polygons[i], SIZE);\n    const curVertices = normalized.positions || normalized;\n    const curCount = curVertices.length / SIZE;\n    const curIds = new Array(curCount).fill(polygonId);\n    vertices.push(...curVertices);\n    ids.push(...curIds);\n    const curIndices = Polygon.getSurfaceIndices(normalized, SIZE);\n    const indexCount = curIndices.length;\n    for (let j = 0; j < indexCount; j++) {\n      curIndices[j] += count;\n    }\n    count += curCount;\n    indices.push(...curIndices);\n    polygonId++;\n  }\n\n  // UInt16 (UNSIGNED_SHORT) buffer is used for indices\n  assert(count < 65536); // 0xFFFF\n\n  const vertexCount = Polygon.getVertexCount(vertices, SIZE);\n\n  return {vertices, indices, ids, vertexCount};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}