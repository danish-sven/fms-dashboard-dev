{"ast":null,"code":"import { getCoords } from '@turf/invariant';\n\n/**\n * Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.\n *\n * @name booleanClockwise\n * @param {Feature<LineString>} line to be evaluated\n * @returns {boolean} true/false\n * @example\n * var clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);\n * var counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);\n *\n * turf.booleanClockwise(clockwiseRing)\n * //=true\n * turf.booleanClockwise(counterClockwiseRing)\n * //=false\n */\nfunction booleanClockwise(line) {\n  // validation\n  if (!line) throw new Error('line is required');\n  var type = line.geometry ? line.geometry.type : line.type;\n  if (!Array.isArray(line) && type !== 'LineString') throw new Error('geometry must be a LineString');\n  var ring = getCoords(line);\n  var sum = 0;\n  var i = 1;\n  var prev, cur;\n  while (i < ring.length) {\n    prev = cur || ring[0];\n    cur = ring[i];\n    sum += (cur[0] - prev[0]) * (cur[1] + prev[1]);\n    i++;\n  }\n  return sum > 0;\n}\nexport default booleanClockwise;","map":{"version":3,"names":["getCoords","booleanClockwise","line","Error","type","geometry","Array","isArray","ring","sum","i","prev","cur","length"],"sources":["/Users/stefanhall/Documents/Employment/Zoomo/Git/repos/fms-dashboard-dev/node_modules/@turf/boolean-clockwise/main.es.js"],"sourcesContent":["import { getCoords } from '@turf/invariant';\n\n/**\n * Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.\n *\n * @name booleanClockwise\n * @param {Feature<LineString>} line to be evaluated\n * @returns {boolean} true/false\n * @example\n * var clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);\n * var counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);\n *\n * turf.booleanClockwise(clockwiseRing)\n * //=true\n * turf.booleanClockwise(counterClockwiseRing)\n * //=false\n */\nfunction booleanClockwise(line) {\n    // validation\n    if (!line) throw new Error('line is required');\n    var type = (line.geometry) ? line.geometry.type : line.type;\n    if (!Array.isArray(line) && type !== 'LineString') throw new Error('geometry must be a LineString');\n\n    var ring = getCoords(line);\n    var sum = 0;\n    var i = 1;\n    var prev, cur;\n    while (i < ring.length) {\n        prev = cur || ring[0];\n        cur = ring[i];\n        sum += ((cur[0] - prev[0]) * (cur[1] + prev[1]));\n        i++;\n    }\n    return sum > 0;\n}\n\nexport default booleanClockwise;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAACC,IAAI,EAAE;EAC5B;EACA,IAAI,CAACA,IAAI,EAAE,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;EAC9C,IAAIC,IAAI,GAAIF,IAAI,CAACG,QAAQ,GAAIH,IAAI,CAACG,QAAQ,CAACD,IAAI,GAAGF,IAAI,CAACE,IAAI;EAC3D,IAAI,CAACE,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,IAAIE,IAAI,KAAK,YAAY,EAAE,MAAM,IAAID,KAAK,CAAC,+BAA+B,CAAC;EAEnG,IAAIK,IAAI,GAAGR,SAAS,CAACE,IAAI,CAAC;EAC1B,IAAIO,GAAG,GAAG,CAAC;EACX,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,IAAI,EAAEC,GAAG;EACb,OAAOF,CAAC,GAAGF,IAAI,CAACK,MAAM,EAAE;IACpBF,IAAI,GAAGC,GAAG,IAAIJ,IAAI,CAAC,CAAC,CAAC;IACrBI,GAAG,GAAGJ,IAAI,CAACE,CAAC,CAAC;IACbD,GAAG,IAAK,CAACG,GAAG,CAAC,CAAC,CAAC,GAAGD,IAAI,CAAC,CAAC,CAAC,KAAKC,GAAG,CAAC,CAAC,CAAC,GAAGD,IAAI,CAAC,CAAC,CAAC,CAAE;IAChDD,CAAC,EAAE;EACP;EACA,OAAOD,GAAG,GAAG,CAAC;AAClB;AAEA,eAAeR,gBAAgB"},"metadata":{},"sourceType":"module"}