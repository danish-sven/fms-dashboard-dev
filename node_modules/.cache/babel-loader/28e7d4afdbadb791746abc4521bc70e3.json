{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Vector3, equals, assert } from '@math.gl/core';\nconst scratchPosition = new Vector3();\nconst scratchNormal = new Vector3();\nexport default class Plane {\n  constructor() {\n    let normal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 1];\n    let distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _defineProperty(this, \"normal\", void 0);\n    _defineProperty(this, \"distance\", void 0);\n    this.normal = new Vector3();\n    this.distance = -0;\n    this.fromNormalDistance(normal, distance);\n  }\n  fromNormalDistance(normal, distance) {\n    assert(Number.isFinite(distance));\n    this.normal.from(normal).normalize();\n    this.distance = distance;\n    return this;\n  }\n  fromPointNormal(point, normal) {\n    point = scratchPosition.from(point);\n    this.normal.from(normal).normalize();\n    const distance = -this.normal.dot(point);\n    this.distance = distance;\n    return this;\n  }\n  fromCoefficients(a, b, c, d) {\n    this.normal.set(a, b, c);\n    assert(equals(this.normal.len(), 1));\n    this.distance = d;\n    return this;\n  }\n  clone() {\n    return new Plane(this.normal, this.distance);\n  }\n  equals(right) {\n    return equals(this.distance, right.distance) && equals(this.normal, right.normal);\n  }\n  getPointDistance(point) {\n    return this.normal.dot(point) + this.distance;\n  }\n  transform(matrix4) {\n    const normal = scratchNormal.copy(this.normal).transformAsVector(matrix4).normalize();\n    const point = this.normal.scale(-this.distance).transform(matrix4);\n    return this.fromPointNormal(point, normal);\n  }\n  projectPointOntoPlane(point) {\n    let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n    point = scratchPosition.from(point);\n    const pointDistance = this.getPointDistance(point);\n    const scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);\n    return point.subtract(scaledNormal).to(result);\n  }\n}","map":{"version":3,"names":["Vector3","equals","assert","scratchPosition","scratchNormal","Plane","constructor","normal","arguments","length","undefined","distance","_defineProperty","fromNormalDistance","Number","isFinite","from","normalize","fromPointNormal","point","dot","fromCoefficients","a","b","c","d","set","len","clone","right","getPointDistance","transform","matrix4","copy","transformAsVector","scale","projectPointOntoPlane","result","pointDistance","scaledNormal","subtract","to"],"sources":["../../../src/lib/plane.ts"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, equals, assert, NumericArray} from '@math.gl/core';\n\nconst scratchPosition = new Vector3();\nconst scratchNormal = new Vector3();\n\n// A plane in Hessian Normal Form\nexport default class Plane {\n  readonly normal: Vector3;\n  distance: number;\n\n  constructor(normal: Readonly<NumericArray> = [0, 0, 1], distance: number = 0) {\n    this.normal = new Vector3();\n    this.distance = -0;\n    this.fromNormalDistance(normal, distance);\n  }\n\n  /** Creates a plane from a normal and a distance from the origin. */\n  fromNormalDistance(normal: Readonly<NumericArray>, distance: number): this {\n    assert(Number.isFinite(distance));\n    this.normal.from(normal).normalize();\n    this.distance = distance;\n    return this;\n  }\n\n  /** Creates a plane from a normal and a point on the plane. */\n  fromPointNormal(point: Readonly<NumericArray>, normal: Readonly<NumericArray>): this {\n    point = scratchPosition.from(point);\n    this.normal.from(normal).normalize();\n    const distance = -this.normal.dot(point);\n    this.distance = distance;\n    return this;\n  }\n\n  /** Creates a plane from the general equation */\n  fromCoefficients(a: number, b: number, c: number, d: number): this {\n    this.normal.set(a, b, c);\n    assert(equals(this.normal.len(), 1));\n    this.distance = d;\n    return this;\n  }\n\n  /** Duplicates a Plane instance. */\n  clone(): Plane {\n    return new Plane(this.normal, this.distance);\n  }\n\n  /** Compares the provided Planes by normal and distance */\n  equals(right: Plane): boolean {\n    return equals(this.distance, right.distance) && equals(this.normal, right.normal);\n  }\n\n  /** Computes the signed shortest distance of a point to a plane.\n   * The sign of the distance determines which side of the plane the point is on.\n   */\n  getPointDistance(point: Readonly<NumericArray>): number {\n    return this.normal.dot(point) + this.distance;\n  }\n\n  /** Transforms the plane by the given transformation matrix. */\n  transform(matrix4: Readonly<NumericArray>): this {\n    const normal = scratchNormal.copy(this.normal).transformAsVector(matrix4).normalize();\n    const point = this.normal.scale(-this.distance).transform(matrix4);\n    return this.fromPointNormal(point, normal);\n  }\n\n  /** Projects a point onto the plane. */\n  projectPointOntoPlane(point: Readonly<NumericArray>, result: Vector3): Vector3;\n  projectPointOntoPlane(\n    point: Readonly<NumericArray>,\n    result?: readonly number[]\n  ): readonly number[];\n\n  projectPointOntoPlane(point, result = [0, 0, 0]) {\n    point = scratchPosition.from(point);\n    // projectedPoint = point - (normal.point + scale) * normal\n    const pointDistance = this.getPointDistance(point);\n    const scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);\n\n    return point.subtract(scaledNormal).to(result);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}