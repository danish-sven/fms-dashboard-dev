{"ast":null,"code":"import { XMLLoader } from '@loaders.gl/xml';\nexport function parseWMSError(text, options) {\n  var _XMLLoader$parseTextS, _parsedXML$ServiceExc, _parsedXML$ogcServic;\n  const parsedXML = (_XMLLoader$parseTextS = XMLLoader.parseTextSync) === null || _XMLLoader$parseTextS === void 0 ? void 0 : _XMLLoader$parseTextS.call(XMLLoader, text, options);\n  const serviceExceptionXML = (parsedXML === null || parsedXML === void 0 ? void 0 : (_parsedXML$ServiceExc = parsedXML.ServiceExceptionReport) === null || _parsedXML$ServiceExc === void 0 ? void 0 : _parsedXML$ServiceExc.ServiceException) || (parsedXML === null || parsedXML === void 0 ? void 0 : (_parsedXML$ogcServic = parsedXML['ogc:ServiceExceptionReport']) === null || _parsedXML$ogcServic === void 0 ? void 0 : _parsedXML$ogcServic['ogc:ServiceException']);\n  const message = typeof serviceExceptionXML === 'string' ? serviceExceptionXML : serviceExceptionXML.value || serviceExceptionXML.code || 'Unknown error';\n  return message;\n}","map":{"version":3,"names":["XMLLoader","parseWMSError","text","options","_XMLLoader$parseTextS","_parsedXML$ServiceExc","_parsedXML$ogcServic","parsedXML","parseTextSync","call","serviceExceptionXML","ServiceExceptionReport","ServiceException","message","value","code"],"sources":["../../../../../src/lib/parsers/wms/parse-wms-error.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {XMLLoader} from '@loaders.gl/xml';\n\n/**\n * Extract an error message from WMS error response XML\n * @param text\n * @param options\n * @returns a string with a human readable message\n */\nexport function parseWMSError(text: string, options): string {\n  const parsedXML = XMLLoader.parseTextSync?.(text, options);\n  const serviceExceptionXML =\n    parsedXML?.ServiceExceptionReport?.ServiceException ||\n    parsedXML?.['ogc:ServiceExceptionReport']?.['ogc:ServiceException'];\n  // Sigh, can be either a string or an object\n  const message =\n    typeof serviceExceptionXML === 'string'\n      ? serviceExceptionXML\n      : serviceExceptionXML.value || serviceExceptionXML.code || 'Unknown error';\n  return message;\n}\n"],"mappings":"AAEA,SAAQA,SAAS,QAAO,iBAAiB;AAQzC,OAAO,SAASC,aAAaA,CAACC,IAAY,EAAEC,OAAO,EAAU;EAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,oBAAA;EAC3D,MAAMC,SAAS,IAAAH,qBAAA,GAAGJ,SAAS,CAACQ,aAAa,cAAAJ,qBAAA,uBAAvBA,qBAAA,CAAAK,IAAA,CAAAT,SAAS,EAAiBE,IAAI,EAAEC,OAAO,CAAC;EAC1D,MAAMO,mBAAmB,GACvB,CAAAH,SAAS,aAATA,SAAS,wBAAAF,qBAAA,GAATE,SAAS,CAAEI,sBAAsB,cAAAN,qBAAA,uBAAjCA,qBAAA,CAAmCO,gBAAgB,MACnDL,SAAS,aAATA,SAAS,wBAAAD,oBAAA,GAATC,SAAS,CAAG,4BAA4B,CAAC,cAAAD,oBAAA,uBAAzCA,oBAAA,CAA4C,sBAAsB,CAAC;EAErE,MAAMO,OAAO,GACX,OAAOH,mBAAmB,KAAK,QAAQ,GACnCA,mBAAmB,GACnBA,mBAAmB,CAACI,KAAK,IAAIJ,mBAAmB,CAACK,IAAI,IAAI,eAAe;EAC9E,OAAOF,OAAO;AAChB"},"metadata":{},"sourceType":"module"}