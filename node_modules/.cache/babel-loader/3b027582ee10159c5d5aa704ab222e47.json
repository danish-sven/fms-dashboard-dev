{"ast":null,"code":"import { Vector3 } from '@math.gl/core';\nimport BoundingSphere from '../bounding-volumes/bounding-sphere';\nconst fromPointsXMin = new Vector3();\nconst fromPointsYMin = new Vector3();\nconst fromPointsZMin = new Vector3();\nconst fromPointsXMax = new Vector3();\nconst fromPointsYMax = new Vector3();\nconst fromPointsZMax = new Vector3();\nconst fromPointsCurrentPos = new Vector3();\nconst fromPointsScratch = new Vector3();\nconst fromPointsRitterCenter = new Vector3();\nconst fromPointsMinBoxPt = new Vector3();\nconst fromPointsMaxBoxPt = new Vector3();\nconst fromPointsNaiveCenterScratch = new Vector3();\nconst volumeConstant = 4.0 / 3.0 * Math.PI;\nexport default function makeBoundingSphereFromPoints(positions) {\n  let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new BoundingSphere();\n  if (!positions || positions.length === 0) {\n    return result.fromCenterRadius([0, 0, 0], 0);\n  }\n  const currentPos = fromPointsCurrentPos.copy(positions[0]);\n  const xMin = fromPointsXMin.copy(currentPos);\n  const yMin = fromPointsYMin.copy(currentPos);\n  const zMin = fromPointsZMin.copy(currentPos);\n  const xMax = fromPointsXMax.copy(currentPos);\n  const yMax = fromPointsYMax.copy(currentPos);\n  const zMax = fromPointsZMax.copy(currentPos);\n  for (const position of positions) {\n    currentPos.copy(position);\n    const x = currentPos.x;\n    const y = currentPos.y;\n    const z = currentPos.z;\n    if (x < xMin.x) {\n      xMin.copy(currentPos);\n    }\n    if (x > xMax.x) {\n      xMax.copy(currentPos);\n    }\n    if (y < yMin.y) {\n      yMin.copy(currentPos);\n    }\n    if (y > yMax.y) {\n      yMax.copy(currentPos);\n    }\n    if (z < zMin.z) {\n      zMin.copy(currentPos);\n    }\n    if (z > zMax.z) {\n      zMax.copy(currentPos);\n    }\n  }\n  const xSpan = fromPointsScratch.copy(xMax).subtract(xMin).magnitudeSquared();\n  const ySpan = fromPointsScratch.copy(yMax).subtract(yMin).magnitudeSquared();\n  const zSpan = fromPointsScratch.copy(zMax).subtract(zMin).magnitudeSquared();\n  let diameter1 = xMin;\n  let diameter2 = xMax;\n  let maxSpan = xSpan;\n  if (ySpan > maxSpan) {\n    maxSpan = ySpan;\n    diameter1 = yMin;\n    diameter2 = yMax;\n  }\n  if (zSpan > maxSpan) {\n    maxSpan = zSpan;\n    diameter1 = zMin;\n    diameter2 = zMax;\n  }\n  const ritterCenter = fromPointsRitterCenter;\n  ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\n  ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\n  ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\n  let radiusSquared = fromPointsScratch.copy(diameter2).subtract(ritterCenter).magnitudeSquared();\n  let ritterRadius = Math.sqrt(radiusSquared);\n  const minBoxPt = fromPointsMinBoxPt;\n  minBoxPt.x = xMin.x;\n  minBoxPt.y = yMin.y;\n  minBoxPt.z = zMin.z;\n  const maxBoxPt = fromPointsMaxBoxPt;\n  maxBoxPt.x = xMax.x;\n  maxBoxPt.y = yMax.y;\n  maxBoxPt.z = zMax.z;\n  const naiveCenter = fromPointsNaiveCenterScratch.copy(minBoxPt).add(maxBoxPt).multiplyByScalar(0.5);\n  let naiveRadius = 0;\n  for (const position of positions) {\n    currentPos.copy(position);\n    const r = fromPointsScratch.copy(currentPos).subtract(naiveCenter).magnitude();\n    if (r > naiveRadius) {\n      naiveRadius = r;\n    }\n    const oldCenterToPointSquared = fromPointsScratch.copy(currentPos).subtract(ritterCenter).magnitudeSquared();\n    if (oldCenterToPointSquared > radiusSquared) {\n      const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\n      ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\n      radiusSquared = ritterRadius * ritterRadius;\n      const oldToNew = oldCenterToPoint - ritterRadius;\n      ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;\n      ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;\n      ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;\n    }\n  }\n  if (ritterRadius < naiveRadius) {\n    ritterCenter.to(result.center);\n    result.radius = ritterRadius;\n  } else {\n    naiveCenter.to(result.center);\n    result.radius = naiveRadius;\n  }\n  return result;\n}","map":{"version":3,"names":["Vector3","BoundingSphere","fromPointsXMin","fromPointsYMin","fromPointsZMin","fromPointsXMax","fromPointsYMax","fromPointsZMax","fromPointsCurrentPos","fromPointsScratch","fromPointsRitterCenter","fromPointsMinBoxPt","fromPointsMaxBoxPt","fromPointsNaiveCenterScratch","volumeConstant","Math","PI","makeBoundingSphereFromPoints","positions","result","arguments","length","undefined","fromCenterRadius","currentPos","copy","xMin","yMin","zMin","xMax","yMax","zMax","position","x","y","z","xSpan","subtract","magnitudeSquared","ySpan","zSpan","diameter1","diameter2","maxSpan","ritterCenter","radiusSquared","ritterRadius","sqrt","minBoxPt","maxBoxPt","naiveCenter","add","multiplyByScalar","naiveRadius","r","magnitude","oldCenterToPointSquared","oldCenterToPoint","oldToNew","to","center","radius"],"sources":["../../../../src/lib/algorithms/bounding-sphere-from-points.ts"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3} from '@math.gl/core';\nimport BoundingSphere from '../bounding-volumes/bounding-sphere';\n\n/* eslint-disable */\nconst fromPointsXMin = new Vector3();\nconst fromPointsYMin = new Vector3();\nconst fromPointsZMin = new Vector3();\nconst fromPointsXMax = new Vector3();\nconst fromPointsYMax = new Vector3();\nconst fromPointsZMax = new Vector3();\nconst fromPointsCurrentPos = new Vector3();\nconst fromPointsScratch = new Vector3();\nconst fromPointsRitterCenter = new Vector3();\nconst fromPointsMinBoxPt = new Vector3();\nconst fromPointsMaxBoxPt = new Vector3();\nconst fromPointsNaiveCenterScratch = new Vector3();\nconst volumeConstant = (4.0 / 3.0) * Math.PI;\n\n/**\n * Computes a tight-fitting bounding sphere enclosing a list of 3D Cartesian points.\n *\n * The bounding sphere is computed by running two algorithms, a naive algorithm and\n * Ritter's algorithm. The smaller of the two spheres is used to ensure a tight fit.\n * Bounding sphere computation article http://blogs.agi.com/insight3d/index.php/2008/02/04/a-bounding\n *\n * @param positions An array of points that the bounding sphere will enclose.\n * @param result Optional object onto which to store the result.\n * @returns The modified result parameter or a new `BoundingSphere` instance if not provided.\n */\nexport default function makeBoundingSphereFromPoints(\n  positions: number[][],\n  result: BoundingSphere = new BoundingSphere()\n): BoundingSphere {\n  if (!positions || positions.length === 0) {\n    return result.fromCenterRadius([0, 0, 0], 0);\n  }\n\n  const currentPos = fromPointsCurrentPos.copy(positions[0]);\n\n  const xMin = fromPointsXMin.copy(currentPos);\n  const yMin = fromPointsYMin.copy(currentPos);\n  const zMin = fromPointsZMin.copy(currentPos);\n\n  const xMax = fromPointsXMax.copy(currentPos);\n  const yMax = fromPointsYMax.copy(currentPos);\n  const zMax = fromPointsZMax.copy(currentPos);\n\n  for (const position of positions) {\n    currentPos.copy(position);\n\n    const x = currentPos.x;\n    const y = currentPos.y;\n    const z = currentPos.z;\n\n    // Store points containing the the smallest and largest components\n    if (x < xMin.x) {\n      xMin.copy(currentPos);\n    }\n\n    if (x > xMax.x) {\n      xMax.copy(currentPos);\n    }\n\n    if (y < yMin.y) {\n      yMin.copy(currentPos);\n    }\n\n    if (y > yMax.y) {\n      yMax.copy(currentPos);\n    }\n\n    if (z < zMin.z) {\n      zMin.copy(currentPos);\n    }\n\n    if (z > zMax.z) {\n      zMax.copy(currentPos);\n    }\n  }\n\n  // Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).\n  const xSpan = fromPointsScratch.copy(xMax).subtract(xMin).magnitudeSquared();\n  const ySpan = fromPointsScratch.copy(yMax).subtract(yMin).magnitudeSquared();\n  const zSpan = fromPointsScratch.copy(zMax).subtract(zMin).magnitudeSquared();\n\n  // Set the diameter endpoints to the largest span.\n  let diameter1 = xMin;\n  let diameter2 = xMax;\n  let maxSpan = xSpan;\n  if (ySpan > maxSpan) {\n    maxSpan = ySpan;\n    diameter1 = yMin;\n    diameter2 = yMax;\n  }\n  if (zSpan > maxSpan) {\n    maxSpan = zSpan;\n    diameter1 = zMin;\n    diameter2 = zMax;\n  }\n\n  // Calculate the center of the initial sphere found by Ritter's algorithm\n  const ritterCenter = fromPointsRitterCenter;\n  ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\n  ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\n  ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\n\n  // Calculate the radius of the initial sphere found by Ritter's algorithm\n  let radiusSquared = fromPointsScratch.copy(diameter2).subtract(ritterCenter).magnitudeSquared();\n  let ritterRadius = Math.sqrt(radiusSquared);\n\n  // Find the center of the sphere found using the Naive method.\n  const minBoxPt = fromPointsMinBoxPt;\n  minBoxPt.x = xMin.x;\n  minBoxPt.y = yMin.y;\n  minBoxPt.z = zMin.z;\n\n  const maxBoxPt = fromPointsMaxBoxPt;\n  maxBoxPt.x = xMax.x;\n  maxBoxPt.y = yMax.y;\n  maxBoxPt.z = zMax.z;\n\n  const naiveCenter = fromPointsNaiveCenterScratch\n    .copy(minBoxPt)\n    .add(maxBoxPt)\n    .multiplyByScalar(0.5);\n\n  // Begin 2nd pass to find naive radius and modify the ritter sphere.\n  let naiveRadius = 0;\n  for (const position of positions) {\n    currentPos.copy(position);\n\n    // Find the furthest point from the naive center to calculate the naive radius.\n    const r = fromPointsScratch.copy(currentPos).subtract(naiveCenter).magnitude();\n    if (r > naiveRadius) {\n      naiveRadius = r;\n    }\n\n    // Make adjustments to the Ritter Sphere to include all points.\n    const oldCenterToPointSquared = fromPointsScratch\n      .copy(currentPos)\n      .subtract(ritterCenter)\n      .magnitudeSquared();\n\n    if (oldCenterToPointSquared > radiusSquared) {\n      const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\n      // Calculate new radius to include the point that lies outside\n      ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\n      radiusSquared = ritterRadius * ritterRadius;\n      // Calculate center of new Ritter sphere\n      const oldToNew = oldCenterToPoint - ritterRadius;\n      ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;\n      ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;\n      ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;\n    }\n  }\n\n  if (ritterRadius < naiveRadius) {\n    ritterCenter.to(result.center);\n    result.radius = ritterRadius;\n  } else {\n    naiveCenter.to(result.center);\n    result.radius = naiveRadius;\n  }\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}