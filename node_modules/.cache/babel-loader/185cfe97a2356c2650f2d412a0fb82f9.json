{"ast":null,"code":"import { assert, log } from '@luma.gl/webgl';\nimport { Matrix4, Quaternion } from '@math.gl/core';\nexport const ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nexport const ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\nfunction accessorToJsArray(accessor) {\n  if (!accessor._animation) {\n    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n    const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n    const length = components * accessor.count;\n    const {\n      buffer,\n      byteOffset\n    } = accessor.bufferView.data;\n    const array = new ArrayType(buffer, byteOffset + (accessor.byteOffset || 0), length);\n    if (components === 1) {\n      accessor._animation = Array.from(array);\n    } else {\n      const slicedArray = [];\n      for (let i = 0; i < array.length; i += components) {\n        slicedArray.push(Array.from(array.slice(i, i + components)));\n      }\n      accessor._animation = slicedArray;\n    }\n  }\n  return accessor._animation;\n}\nconst helperMatrix = new Matrix4();\nfunction applyTranslationRotationScale(gltfNode, node) {\n  node.matrix.identity();\n  if (gltfNode.translation) {\n    node.matrix.translate(gltfNode.translation);\n  }\n  if (gltfNode.rotation) {\n    const rotationMatrix = helperMatrix.fromQuaternion(gltfNode.rotation);\n    node.matrix.multiplyRight(rotationMatrix);\n  }\n  if (gltfNode.scale) {\n    node.matrix.scale(gltfNode.scale);\n  }\n}\nconst quaternion = new Quaternion();\nfunction linearInterpolate(target, path, start, stop, ratio) {\n  if (path === 'rotation') {\n    quaternion.slerp({\n      start,\n      target: stop,\n      ratio\n    });\n    for (let i = 0; i < quaternion.length; i++) {\n      target[path][i] = quaternion[i];\n    }\n  } else {\n    for (let i = 0; i < start.length; i++) {\n      target[path][i] = ratio * stop[i] + (1 - ratio) * start[i];\n    }\n  }\n}\nfunction cubicsplineInterpolate(target, path, _ref) {\n  let {\n    p0,\n    outTangent0,\n    inTangent1,\n    p1,\n    tDiff,\n    ratio: t\n  } = _ref;\n  for (let i = 0; i < target[path].length; i++) {\n    const m0 = outTangent0[i] * tDiff;\n    const m1 = inTangent1[i] * tDiff;\n    target[path][i] = (2 * Math.pow(t, 3) - 3 * Math.pow(t, 2) + 1) * p0[i] + (Math.pow(t, 3) - 2 * Math.pow(t, 2) + t) * m0 + (-2 * Math.pow(t, 3) + 3 * Math.pow(t, 2)) * p1[i] + (Math.pow(t, 3) - Math.pow(t, 2)) * m1;\n  }\n}\nfunction stepInterpolate(target, path, value) {\n  for (let i = 0; i < value.length; i++) {\n    target[path][i] = value[i];\n  }\n}\nfunction interpolate(time, _ref2, target, path) {\n  let {\n    input,\n    interpolation,\n    output\n  } = _ref2;\n  const maxTime = input[input.length - 1];\n  const animationTime = time % maxTime;\n  const nextIndex = input.findIndex(t => t >= animationTime);\n  const previousIndex = Math.max(0, nextIndex - 1);\n  if (!Array.isArray(target[path])) {\n    switch (path) {\n      case 'translation':\n        target[path] = [0, 0, 0];\n        break;\n      case 'rotation':\n        target[path] = [0, 0, 0, 1];\n        break;\n      case 'scale':\n        target[path] = [1, 1, 1];\n        break;\n      default:\n        log.warn(\"Bad animation path \".concat(path))();\n    }\n  }\n  assert(target[path].length === output[previousIndex].length);\n  const previousTime = input[previousIndex];\n  const nextTime = input[nextIndex];\n  switch (interpolation) {\n    case 'STEP':\n      stepInterpolate(target, path, output[previousIndex]);\n      break;\n    case 'LINEAR':\n      if (nextTime > previousTime) {\n        const ratio = (animationTime - previousTime) / (nextTime - previousTime);\n        linearInterpolate(target, path, output[previousIndex], output[nextIndex], ratio);\n      }\n      break;\n    case 'CUBICSPLINE':\n      if (nextTime > previousTime) {\n        const ratio = (animationTime - previousTime) / (nextTime - previousTime);\n        const tDiff = nextTime - previousTime;\n        const p0 = output[3 * previousIndex + 1];\n        const outTangent0 = output[3 * previousIndex + 2];\n        const inTangent1 = output[3 * nextIndex + 0];\n        const p1 = output[3 * nextIndex + 1];\n        cubicsplineInterpolate(target, path, {\n          p0,\n          outTangent0,\n          inTangent1,\n          p1,\n          tDiff,\n          ratio\n        });\n      }\n      break;\n    default:\n      log.warn(\"Interpolation \".concat(interpolation, \" not supported\"))();\n      break;\n  }\n}\nclass GLTFAnimation {\n  constructor(props) {\n    this.startTime = 0;\n    this.playing = true;\n    this.speed = 1;\n    this.channels = [];\n    Object.assign(this, props);\n  }\n  animate(timeMs) {\n    if (!this.playing) {\n      return;\n    }\n    const absTime = timeMs / 1000;\n    const time = (absTime - this.startTime) * this.speed;\n    this.channels.forEach(_ref3 => {\n      let {\n        sampler,\n        target,\n        path\n      } = _ref3;\n      interpolate(time, sampler, target, path);\n      applyTranslationRotationScale(target, target._node);\n    });\n  }\n}\nexport default class GLTFAnimator {\n  constructor(gltf) {\n    this.animations = gltf.animations.map((animation, index) => {\n      const name = animation.name || \"Animation-\".concat(index);\n      const samplers = animation.samplers.map(_ref4 => {\n        let {\n          input,\n          interpolation = 'LINEAR',\n          output\n        } = _ref4;\n        return {\n          input: accessorToJsArray(gltf.accessors[input]),\n          interpolation,\n          output: accessorToJsArray(gltf.accessors[output])\n        };\n      });\n      const channels = animation.channels.map(_ref5 => {\n        let {\n          sampler,\n          target\n        } = _ref5;\n        return {\n          sampler: samplers[sampler],\n          target: gltf.nodes[target.node],\n          path: target.path\n        };\n      });\n      return new GLTFAnimation({\n        name,\n        channels\n      });\n    });\n  }\n  animate(time) {\n    this.setTime(time);\n  }\n  setTime(time) {\n    this.animations.forEach(animation => animation.animate(time));\n  }\n  getAnimations() {\n    return this.animations;\n  }\n}","map":{"version":3,"names":["assert","log","Matrix4","Quaternion","ATTRIBUTE_TYPE_TO_COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY","Int8Array","Uint8Array","Int16Array","Uint16Array","Uint32Array","Float32Array","accessorToJsArray","accessor","_animation","ArrayType","componentType","components","type","length","count","buffer","byteOffset","bufferView","data","array","Array","from","slicedArray","i","push","slice","helperMatrix","applyTranslationRotationScale","gltfNode","node","matrix","identity","translation","translate","rotation","rotationMatrix","fromQuaternion","multiplyRight","scale","quaternion","linearInterpolate","target","path","start","stop","ratio","slerp","cubicsplineInterpolate","_ref","p0","outTangent0","inTangent1","p1","tDiff","t","m0","m1","Math","pow","stepInterpolate","value","interpolate","time","_ref2","input","interpolation","output","maxTime","animationTime","nextIndex","findIndex","previousIndex","max","isArray","warn","concat","previousTime","nextTime","GLTFAnimation","constructor","props","startTime","playing","speed","channels","Object","assign","animate","timeMs","absTime","forEach","_ref3","sampler","_node","GLTFAnimator","gltf","animations","map","animation","index","name","samplers","_ref4","accessors","_ref5","nodes","setTime","getAnimations"],"sources":["../../../src/gltf/gltf-animator.js"],"sourcesContent":["import {assert, log} from '@luma.gl/webgl';\nimport {Matrix4, Quaternion} from '@math.gl/core';\n\n// TODO: import from loaders.gl?\nexport const ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nexport const ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\n//\n\nfunction accessorToJsArray(accessor) {\n  if (!accessor._animation) {\n    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n    const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n    const length = components * accessor.count;\n    const {buffer, byteOffset} = accessor.bufferView.data;\n\n    const array = new ArrayType(buffer, byteOffset + (accessor.byteOffset || 0), length);\n\n    if (components === 1) {\n      accessor._animation = Array.from(array);\n    } else {\n      // Slice array\n      const slicedArray = [];\n      for (let i = 0; i < array.length; i += components) {\n        slicedArray.push(Array.from(array.slice(i, i + components)));\n      }\n      accessor._animation = slicedArray;\n    }\n  }\n\n  return accessor._animation;\n}\n\n// TODO: share with GLTFInstantiator\nconst helperMatrix = new Matrix4();\nfunction applyTranslationRotationScale(gltfNode, node) {\n  node.matrix.identity();\n\n  if (gltfNode.translation) {\n    node.matrix.translate(gltfNode.translation);\n  }\n\n  if (gltfNode.rotation) {\n    const rotationMatrix = helperMatrix.fromQuaternion(gltfNode.rotation);\n    node.matrix.multiplyRight(rotationMatrix);\n  }\n\n  if (gltfNode.scale) {\n    node.matrix.scale(gltfNode.scale);\n  }\n}\n\nconst quaternion = new Quaternion();\nfunction linearInterpolate(target, path, start, stop, ratio) {\n  if (path === 'rotation') {\n    // SLERP when path is rotation\n    quaternion.slerp({start, target: stop, ratio});\n    for (let i = 0; i < quaternion.length; i++) {\n      target[path][i] = quaternion[i];\n    }\n  } else {\n    // regular interpolation\n    for (let i = 0; i < start.length; i++) {\n      target[path][i] = ratio * stop[i] + (1 - ratio) * start[i];\n    }\n  }\n}\n\nfunction cubicsplineInterpolate(target, path, {p0, outTangent0, inTangent1, p1, tDiff, ratio: t}) {\n  // TODO: Quaternion might need normalization\n  for (let i = 0; i < target[path].length; i++) {\n    const m0 = outTangent0[i] * tDiff;\n    const m1 = inTangent1[i] * tDiff;\n    target[path][i] =\n      (2 * Math.pow(t, 3) - 3 * Math.pow(t, 2) + 1) * p0[i] +\n      (Math.pow(t, 3) - 2 * Math.pow(t, 2) + t) * m0 +\n      (-2 * Math.pow(t, 3) + 3 * Math.pow(t, 2)) * p1[i] +\n      (Math.pow(t, 3) - Math.pow(t, 2)) * m1;\n  }\n}\n\nfunction stepInterpolate(target, path, value) {\n  for (let i = 0; i < value.length; i++) {\n    target[path][i] = value[i];\n  }\n}\n\nfunction interpolate(time, {input, interpolation, output}, target, path) {\n  const maxTime = input[input.length - 1];\n  const animationTime = time % maxTime;\n\n  const nextIndex = input.findIndex(t => t >= animationTime);\n  const previousIndex = Math.max(0, nextIndex - 1);\n\n  if (!Array.isArray(target[path])) {\n    switch (path) {\n      case 'translation':\n        target[path] = [0, 0, 0];\n        break;\n\n      case 'rotation':\n        target[path] = [0, 0, 0, 1];\n        break;\n\n      case 'scale':\n        target[path] = [1, 1, 1];\n        break;\n\n      default:\n        log.warn(`Bad animation path ${path}`)();\n    }\n  }\n\n  assert(target[path].length === output[previousIndex].length);\n  const previousTime = input[previousIndex];\n  const nextTime = input[nextIndex];\n\n  switch (interpolation) {\n    case 'STEP':\n      stepInterpolate(target, path, output[previousIndex]);\n      break;\n\n    case 'LINEAR':\n      if (nextTime > previousTime) {\n        const ratio = (animationTime - previousTime) / (nextTime - previousTime);\n        linearInterpolate(target, path, output[previousIndex], output[nextIndex], ratio);\n      }\n      break;\n\n    case 'CUBICSPLINE':\n      if (nextTime > previousTime) {\n        const ratio = (animationTime - previousTime) / (nextTime - previousTime);\n        const tDiff = nextTime - previousTime;\n\n        const p0 = output[3 * previousIndex + 1];\n        const outTangent0 = output[3 * previousIndex + 2];\n        const inTangent1 = output[3 * nextIndex + 0];\n        const p1 = output[3 * nextIndex + 1];\n\n        cubicsplineInterpolate(target, path, {p0, outTangent0, inTangent1, p1, tDiff, ratio});\n      }\n      break;\n\n    default:\n      log.warn(`Interpolation ${interpolation} not supported`)();\n      break;\n  }\n}\n\nclass GLTFAnimation {\n  constructor(props) {\n    this.startTime = 0;\n    this.playing = true;\n    this.speed = 1;\n    this.channels = [];\n\n    Object.assign(this, props);\n  }\n\n  animate(timeMs) {\n    if (!this.playing) {\n      return;\n    }\n\n    const absTime = timeMs / 1000;\n    const time = (absTime - this.startTime) * this.speed;\n\n    this.channels.forEach(({sampler, target, path}) => {\n      interpolate(time, sampler, target, path);\n      applyTranslationRotationScale(target, target._node);\n    });\n  }\n}\n\nexport default class GLTFAnimator {\n  constructor(gltf) {\n    this.animations = gltf.animations.map((animation, index) => {\n      const name = animation.name || `Animation-${index}`;\n      const samplers = animation.samplers.map(({input, interpolation = 'LINEAR', output}) => ({\n        input: accessorToJsArray(gltf.accessors[input]),\n        interpolation,\n        output: accessorToJsArray(gltf.accessors[output])\n      }));\n      const channels = animation.channels.map(({sampler, target}) => ({\n        sampler: samplers[sampler],\n        target: gltf.nodes[target.node],\n        path: target.path\n      }));\n      return new GLTFAnimation({name, channels});\n    });\n  }\n\n  // TODO(Tarek): This should be removed? (deck.gl is using this)\n  animate(time) {\n    this.setTime(time);\n  }\n\n  setTime(time) {\n    this.animations.forEach(animation => animation.animate(time));\n  }\n\n  getAnimations() {\n    return this.animations;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}