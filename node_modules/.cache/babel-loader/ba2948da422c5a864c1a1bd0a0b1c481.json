{"ast":null,"code":"var _jsxFileName = \"/Users/stefanhall/Documents/Employment/Zoomo/Git/repos/fms-dashboard-dev/mapbox-learn/src/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport geoJson from './sydney-parks.json';\nimport vehicleData from './vehicleData.json';\nimport './Map.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = 'pk.eyJ1Ijoic3RlZmFuZHMiLCJhIjoiY2xpbDhieGVsMDJ6cDNkcnRlZHd1Mm9oMCJ9.e2hVvAkDhSwaGmT9jCl83w';\nexport default function App() {\n  _s();\n  const mapContainer = useRef(null); // This will hold the div element rendered by this component\n  const map = useRef(null); // This will hold our map instance\n  const [lng, setLng] = useState(151.20); // This is the longitude of the map center\n  const [lat, setLat] = useState(-33.86); // This is the latitude of the map center\n  const [zoom, setZoom] = useState(12); // This is the initial zoom level of the map\n  const [popup, setPopup] = useState(null); // This holds the current displayed popup\n\n  // This function adjusts the font-size based on the current zoom level of the map\n  const resizeMarkers = () => {\n    const newZoom = map.current.getZoom();\n    setZoom(newZoom);\n    mapContainer.current.style.fontSize = `${newZoom}px`;\n  };\n  useEffect(() => {\n    // We're setting up the map only once after the component is first rendered.\n    if (map.current) return; // Skip setup if it's already been done\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v12',\n      center: [lng, lat],\n      zoom: zoom\n    });\n    map.current.on('zoom', resizeMarkers); // Listen for zoom events to adjust the markers' size\n\n    // Load image for the marker and set up layers, sources, and event listeners after the map is loaded\n    map.current.on('load', () => {\n      loadMarkerImageAndSetupLayers();\n      setupPopupOnHover();\n      closePopupOnClickAnywhere();\n    });\n\n    // Remove map when this component is being unmounted\n    return () => map.current.remove();\n  }, []);\n  useEffect(() => {\n    // Add vehicle markers to the map\n    // This is done every time vehicleData changes\n    if (!map.current) return;\n    addVehicleMarkers();\n  }, [vehicleData]); // This effect depends on vehicleData\n\n  return (\n    /*#__PURE__*/\n    // Render the div that will contain the map.\n    // Its font size is adjusted by the current zoom level of the map\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapContainer,\n        className: \"map-container\",\n        style: {\n          fontSize: `${zoom}px`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"mXV0ekr0F/uTXEQj6w6X1xUIQkg=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","useState","mapboxgl","geoJson","vehicleData","jsxDEV","_jsxDEV","accessToken","App","_s","mapContainer","map","lng","setLng","lat","setLat","zoom","setZoom","popup","setPopup","resizeMarkers","newZoom","current","getZoom","style","fontSize","Map","container","center","on","loadMarkerImageAndSetupLayers","setupPopupOnHover","closePopupOnClickAnywhere","remove","addVehicleMarkers","children","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stefanhall/Documents/Employment/Zoomo/Git/repos/fms-dashboard-dev/mapbox-learn/src/Map.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\n\nimport geoJson from './sydney-parks.json';\nimport vehicleData from './vehicleData.json';\n\nimport './Map.css';\n\nmapboxgl.accessToken = 'pk.eyJ1Ijoic3RlZmFuZHMiLCJhIjoiY2xpbDhieGVsMDJ6cDNkcnRlZHd1Mm9oMCJ9.e2hVvAkDhSwaGmT9jCl83w';\n\nexport default function App() {\n  const mapContainer = useRef(null); // This will hold the div element rendered by this component\n  const map = useRef(null); // This will hold our map instance\n  const [lng, setLng] = useState(151.20); // This is the longitude of the map center\n  const [lat, setLat] = useState(-33.86); // This is the latitude of the map center\n  const [zoom, setZoom] = useState(12); // This is the initial zoom level of the map\n  const [popup, setPopup] = useState(null); // This holds the current displayed popup\n\n  // This function adjusts the font-size based on the current zoom level of the map\n  const resizeMarkers = () => {\n    const newZoom = map.current.getZoom();\n    setZoom(newZoom);\n    mapContainer.current.style.fontSize = `${newZoom}px`;\n  };\n\n  useEffect(() => {\n    // We're setting up the map only once after the component is first rendered.\n    if (map.current) return; // Skip setup if it's already been done\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v12',\n      center: [lng, lat],\n      zoom: zoom\n    });\n\n    map.current.on('zoom', resizeMarkers); // Listen for zoom events to adjust the markers' size\n\n    // Load image for the marker and set up layers, sources, and event listeners after the map is loaded\n    map.current.on('load', () => {\n      loadMarkerImageAndSetupLayers();\n      setupPopupOnHover();\n      closePopupOnClickAnywhere();\n    });\n\n    // Remove map when this component is being unmounted\n    return () => map.current.remove();\n  }, []);\n\n  useEffect(() => {\n    // Add vehicle markers to the map\n    // This is done every time vehicleData changes\n    if (!map.current) return;\n\n    addVehicleMarkers();\n\n  }, [vehicleData]); // This effect depends on vehicleData\n\n  return (\n    // Render the div that will contain the map.\n    // Its font size is adjusted by the current zoom level of the map\n    <div>\n      <div ref={mapContainer} className=\"map-container\" style={{fontSize: `${zoom}px`}} />\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,QAAQ,MAAM,WAAW;AAEhC,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,WAAW,MAAM,oBAAoB;AAE5C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnBJ,QAAQ,CAACK,WAAW,GAAG,4FAA4F;AAEnH,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAMC,YAAY,GAAGX,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EACnC,MAAMY,GAAG,GAAGZ,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1B,MAAM,CAACa,GAAG,EAAEC,MAAM,CAAC,GAAGZ,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;EACxC,MAAM,CAACa,GAAG,EAAEC,MAAM,CAAC,GAAGd,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;EACxC,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACA,MAAMmB,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,OAAO,GAAGV,GAAG,CAACW,OAAO,CAACC,OAAO,CAAC,CAAC;IACrCN,OAAO,CAACI,OAAO,CAAC;IAChBX,YAAY,CAACY,OAAO,CAACE,KAAK,CAACC,QAAQ,GAAI,GAAEJ,OAAQ,IAAG;EACtD,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACd;IACA,IAAIW,GAAG,CAACW,OAAO,EAAE,OAAO,CAAC;IACzBX,GAAG,CAACW,OAAO,GAAG,IAAIpB,QAAQ,CAACwB,GAAG,CAAC;MAC7BC,SAAS,EAAEjB,YAAY,CAACY,OAAO;MAC/BE,KAAK,EAAE,oCAAoC;MAC3CI,MAAM,EAAE,CAAChB,GAAG,EAAEE,GAAG,CAAC;MAClBE,IAAI,EAAEA;IACR,CAAC,CAAC;IAEFL,GAAG,CAACW,OAAO,CAACO,EAAE,CAAC,MAAM,EAAET,aAAa,CAAC,CAAC,CAAC;;IAEvC;IACAT,GAAG,CAACW,OAAO,CAACO,EAAE,CAAC,MAAM,EAAE,MAAM;MAC3BC,6BAA6B,CAAC,CAAC;MAC/BC,iBAAiB,CAAC,CAAC;MACnBC,yBAAyB,CAAC,CAAC;IAC7B,CAAC,CAAC;;IAEF;IACA,OAAO,MAAMrB,GAAG,CAACW,OAAO,CAACW,MAAM,CAAC,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EAENjC,SAAS,CAAC,MAAM;IACd;IACA;IACA,IAAI,CAACW,GAAG,CAACW,OAAO,EAAE;IAElBY,iBAAiB,CAAC,CAAC;EAErB,CAAC,EAAE,CAAC9B,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEnB;IAAA;IACE;IACA;IACAE,OAAA;MAAA6B,QAAA,eACE7B,OAAA;QAAK8B,GAAG,EAAE1B,YAAa;QAAC2B,SAAS,EAAC,eAAe;QAACb,KAAK,EAAE;UAACC,QAAQ,EAAG,GAAET,IAAK;QAAG;MAAE;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjF;EAAC;AAEV;AAAChC,EAAA,CAtDuBD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}