{"ast":null,"code":"import { cloneElement } from 'react';\nconst MAP_STYLE = {\n  position: 'absolute',\n  zIndex: -1\n};\nexport default function evaluateChildren(children, childProps) {\n  if (typeof children === 'function') {\n    return children(childProps);\n  }\n  if (Array.isArray(children)) {\n    return children.map(child => evaluateChildren(child, childProps));\n  }\n  if (isComponent(children)) {\n    if (isReactMap(children)) {\n      childProps.style = MAP_STYLE;\n      return cloneElement(children, childProps);\n    }\n    if (needsDeckGLViewProps(children)) {\n      return cloneElement(children, childProps);\n    }\n  }\n  return children;\n}\nexport function isComponent(child) {\n  return child && typeof child === 'object' && 'type' in child || false;\n}\nfunction isReactMap(child) {\n  var _child$props;\n  return (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.mapStyle;\n}\nfunction needsDeckGLViewProps(child) {\n  const componentClass = child.type;\n  return componentClass && componentClass.deckGLViewProps;\n}","map":{"version":3,"names":["cloneElement","MAP_STYLE","position","zIndex","evaluateChildren","children","childProps","Array","isArray","map","child","isComponent","isReactMap","style","needsDeckGLViewProps","_child$props","props","mapStyle","componentClass","type","deckGLViewProps"],"sources":["../../../src/utils/evaluate-children.ts"],"sourcesContent":["import * as React from 'react';\nimport {cloneElement} from 'react';\n\nconst MAP_STYLE = {position: 'absolute', zIndex: -1};\n\nexport default function evaluateChildren(\n  children: React.ReactNode | Function,\n  childProps: any\n): React.ReactNode {\n  if (typeof children === 'function') {\n    return children(childProps);\n  }\n  if (Array.isArray(children)) {\n    return children.map(child => evaluateChildren(child, childProps));\n  }\n  if (isComponent(children)) {\n    // Special treatment for react-map-gl's Map component\n    // to support shorthand use case <DeckGL><StaticMap /></DeckGL>\n    if (isReactMap(children)) {\n      // Place map under the canvas\n      childProps.style = MAP_STYLE;\n      return cloneElement(children, childProps);\n    }\n    if (needsDeckGLViewProps(children)) {\n      return cloneElement(children, childProps);\n    }\n  }\n\n  return children;\n}\n\nexport function isComponent(child: React.ReactNode): child is React.ReactElement {\n  return (child && typeof child === 'object' && 'type' in child) || false;\n}\n\nfunction isReactMap(child: React.ReactElement): boolean {\n  return child.props?.mapStyle;\n}\n\nfunction needsDeckGLViewProps(child: React.ReactElement): boolean {\n  const componentClass = child.type;\n  // @ts-expect-error deckGLViewProps is a custom hack defined on the constructor (nebula.gl)\n  return componentClass && componentClass.deckGLViewProps;\n}\n"],"mappings":"AACA,SAAQA,YAAR,QAA2B,OAA3B;AAEA,MAAMC,SAAS,GAAG;EAACC,QAAQ,EAAE,UAAX;EAAuBC,MAAM,EAAE,CAAC;AAAhC,CAAlB;AAEA,eAAe,SAASC,gBAATA,CACbC,QADa,EAEbC,UAFa,EAGI;EACjB,IAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;IAClC,OAAOA,QAAQ,CAACC,UAAD,CAAf;EACD;EACD,IAAIC,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;IAC3B,OAAOA,QAAQ,CAACI,GAAT,CAAaC,KAAK,IAAIN,gBAAgB,CAACM,KAAD,EAAQJ,UAAR,CAAtC,CAAP;EACD;EACD,IAAIK,WAAW,CAACN,QAAD,CAAf,EAA2B;IAGzB,IAAIO,UAAU,CAACP,QAAD,CAAd,EAA0B;MAExBC,UAAU,CAACO,KAAX,GAAmBZ,SAAnB;MACA,OAAOD,YAAY,CAACK,QAAD,EAAWC,UAAX,CAAnB;IACD;IACD,IAAIQ,oBAAoB,CAACT,QAAD,CAAxB,EAAoC;MAClC,OAAOL,YAAY,CAACK,QAAD,EAAWC,UAAX,CAAnB;IACD;EACF;EAED,OAAOD,QAAP;AACD;AAED,OAAO,SAASM,WAATA,CAAqBD,KAArB,EAA0E;EAC/E,OAAQA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,IAAsC,UAAUA,KAAjD,IAA2D,KAAlE;AACD;AAED,SAASE,UAATA,CAAoBF,KAApB,EAAwD;EAAA,IAAAK,YAAA;EACtD,QAAAA,YAAA,GAAOL,KAAK,CAACM,KAAb,cAAAD,YAAA,uBAAOA,YAAA,CAAaE,QAApB;AACD;AAED,SAASH,oBAATA,CAA8BJ,KAA9B,EAAkE;EAChE,MAAMQ,cAAc,GAAGR,KAAK,CAACS,IAA7B;EAEA,OAAOD,cAAc,IAAIA,cAAc,CAACE,eAAxC;AACD"},"metadata":{},"sourceType":"module"}