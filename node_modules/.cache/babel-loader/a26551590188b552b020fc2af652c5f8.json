{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Vector3, Matrix3, Quaternion } from '@math.gl/core';\nimport BoundingSphere from './bounding-sphere';\nimport { INTERSECTION } from '../../constants';\nconst scratchVector3 = new Vector3();\nconst scratchOffset = new Vector3();\nconst scratchVectorU = new Vector3();\nconst scratchVectorV = new Vector3();\nconst scratchVectorW = new Vector3();\nconst scratchCorner = new Vector3();\nconst scratchToCenter = new Vector3();\nconst MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\nexport default class OrientedBoundingBox {\n  constructor() {\n    let center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];\n    let halfAxes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    _defineProperty(this, \"center\", void 0);\n    _defineProperty(this, \"halfAxes\", void 0);\n    this.center = new Vector3().from(center);\n    this.halfAxes = new Matrix3(halfAxes);\n  }\n  get halfSize() {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    return [new Vector3(xAxis).len(), new Vector3(yAxis).len(), new Vector3(zAxis).len()];\n  }\n  get quaternion() {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    const normXAxis = new Vector3(xAxis).normalize();\n    const normYAxis = new Vector3(yAxis).normalize();\n    const normZAxis = new Vector3(zAxis).normalize();\n    return new Quaternion().fromMatrix3(new Matrix3([...normXAxis, ...normYAxis, ...normZAxis]));\n  }\n  fromCenterHalfSizeQuaternion(center, halfSize, quaternion) {\n    const quaternionObject = new Quaternion(quaternion);\n    const directionsMatrix = new Matrix3().fromQuaternion(quaternionObject);\n    directionsMatrix[0] = directionsMatrix[0] * halfSize[0];\n    directionsMatrix[1] = directionsMatrix[1] * halfSize[0];\n    directionsMatrix[2] = directionsMatrix[2] * halfSize[0];\n    directionsMatrix[3] = directionsMatrix[3] * halfSize[1];\n    directionsMatrix[4] = directionsMatrix[4] * halfSize[1];\n    directionsMatrix[5] = directionsMatrix[5] * halfSize[1];\n    directionsMatrix[6] = directionsMatrix[6] * halfSize[2];\n    directionsMatrix[7] = directionsMatrix[7] * halfSize[2];\n    directionsMatrix[8] = directionsMatrix[8] * halfSize[2];\n    this.center = new Vector3().from(center);\n    this.halfAxes = directionsMatrix;\n    return this;\n  }\n  clone() {\n    return new OrientedBoundingBox(this.center, this.halfAxes);\n  }\n  equals(right) {\n    return this === right || Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes);\n  }\n  getBoundingSphere() {\n    let result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BoundingSphere();\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n    const cornerVector = scratchVector3.copy(u).add(v).add(w);\n    result.center.copy(this.center);\n    result.radius = cornerVector.magnitude();\n    return result;\n  }\n  intersectPlane(plane) {\n    const center = this.center;\n    const normal = plane.normal;\n    const halfAxes = this.halfAxes;\n    const normalX = normal.x;\n    const normalY = normal.y;\n    const normalZ = normal.z;\n    const radEffective = Math.abs(normalX * halfAxes[MATRIX3.COLUMN0ROW0] + normalY * halfAxes[MATRIX3.COLUMN0ROW1] + normalZ * halfAxes[MATRIX3.COLUMN0ROW2]) + Math.abs(normalX * halfAxes[MATRIX3.COLUMN1ROW0] + normalY * halfAxes[MATRIX3.COLUMN1ROW1] + normalZ * halfAxes[MATRIX3.COLUMN1ROW2]) + Math.abs(normalX * halfAxes[MATRIX3.COLUMN2ROW0] + normalY * halfAxes[MATRIX3.COLUMN2ROW1] + normalZ * halfAxes[MATRIX3.COLUMN2ROW2]);\n    const distanceToPlane = normal.dot(center) + plane.distance;\n    if (distanceToPlane <= -radEffective) {\n      return INTERSECTION.OUTSIDE;\n    } else if (distanceToPlane >= radEffective) {\n      return INTERSECTION.INSIDE;\n    }\n    return INTERSECTION.INTERSECTING;\n  }\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n  distanceSquaredTo(point) {\n    const offset = scratchOffset.from(point).subtract(this.center);\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n    const uHalf = u.magnitude();\n    const vHalf = v.magnitude();\n    const wHalf = w.magnitude();\n    u.normalize();\n    v.normalize();\n    w.normalize();\n    let distanceSquared = 0.0;\n    let d;\n    d = Math.abs(offset.dot(u)) - uHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n    d = Math.abs(offset.dot(v)) - vHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n    d = Math.abs(offset.dot(w)) - wHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n    return distanceSquared;\n  }\n  computePlaneDistances(position, direction) {\n    let result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [-0, -0];\n    let minDist = Number.POSITIVE_INFINITY;\n    let maxDist = Number.NEGATIVE_INFINITY;\n    const center = this.center;\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n    const corner = scratchCorner.copy(u).add(v).add(w).add(center);\n    const toCenter = scratchToCenter.copy(corner).subtract(position);\n    let mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    corner.copy(center).add(u).add(v).subtract(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    corner.copy(center).add(u).subtract(v).add(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    corner.copy(center).add(u).subtract(v).subtract(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    center.copy(corner).subtract(u).add(v).add(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    center.copy(corner).subtract(u).add(v).subtract(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    center.copy(corner).subtract(u).subtract(v).add(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    center.copy(corner).subtract(u).subtract(v).subtract(w);\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n    result[0] = minDist;\n    result[1] = maxDist;\n    return result;\n  }\n  transform(transformation) {\n    this.center.transformAsPoint(transformation);\n    const xAxis = this.halfAxes.getColumn(0, scratchVectorU);\n    xAxis.transformAsPoint(transformation);\n    const yAxis = this.halfAxes.getColumn(1, scratchVectorV);\n    yAxis.transformAsPoint(transformation);\n    const zAxis = this.halfAxes.getColumn(2, scratchVectorW);\n    zAxis.transformAsPoint(transformation);\n    this.halfAxes = new Matrix3([...xAxis, ...yAxis, ...zAxis]);\n    return this;\n  }\n  getTransform() {\n    throw new Error('not implemented');\n  }\n}","map":{"version":3,"names":["Vector3","Matrix3","Quaternion","BoundingSphere","INTERSECTION","scratchVector3","scratchOffset","scratchVectorU","scratchVectorV","scratchVectorW","scratchCorner","scratchToCenter","MATRIX3","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","OrientedBoundingBox","constructor","center","arguments","length","undefined","halfAxes","_defineProperty","from","halfSize","xAxis","getColumn","yAxis","zAxis","len","quaternion","normXAxis","normalize","normYAxis","normZAxis","fromMatrix3","fromCenterHalfSizeQuaternion","quaternionObject","directionsMatrix","fromQuaternion","clone","equals","right","Boolean","getBoundingSphere","result","u","v","w","cornerVector","copy","add","radius","magnitude","intersectPlane","plane","normal","normalX","x","normalY","y","normalZ","z","radEffective","Math","abs","distanceToPlane","dot","distance","OUTSIDE","INSIDE","INTERSECTING","distanceTo","point","sqrt","distanceSquaredTo","offset","subtract","uHalf","vHalf","wHalf","distanceSquared","d","computePlaneDistances","position","direction","minDist","Number","POSITIVE_INFINITY","maxDist","NEGATIVE_INFINITY","corner","toCenter","mag","min","max","transform","transformation","transformAsPoint","getTransform","Error"],"sources":["../../../../src/lib/bounding-volumes/oriented-bounding-box.ts"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3, Matrix4, Quaternion, NumericArray} from '@math.gl/core';\nimport type {BoundingVolume} from './bounding-volume';\nimport BoundingSphere from './bounding-sphere';\nimport type Plane from '../plane';\nimport {INTERSECTION} from '../../constants';\n\nconst scratchVector3 = new Vector3();\nconst scratchOffset = new Vector3();\nconst scratchVectorU = new Vector3();\nconst scratchVectorV = new Vector3();\nconst scratchVectorW = new Vector3();\nconst scratchCorner = new Vector3();\nconst scratchToCenter = new Vector3();\n\nconst MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\n\n/**\n * An OrientedBoundingBox of some object is a closed and convex cuboid.\n * It can provide a tighter bounding volume than `BoundingSphere` or\n * `AxisAlignedBoundingBox` in many cases.\n */\nexport default class OrientedBoundingBox implements BoundingVolume {\n  center: Vector3;\n  halfAxes: Matrix3;\n\n  /**\n   * An OrientedBoundingBox of some object is a closed and convex cuboid.\n   * It can provide a tighter bounding volume than\n   * `BoundingSphere` or `AxisAlignedBoundingBox` in many cases.\n   */\n  constructor(center?: readonly number[], halfAxes?: readonly number[]);\n  constructor(center: Readonly<NumericArray> = [0, 0, 0], halfAxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {\n    this.center = new Vector3().from(center);\n    this.halfAxes = new Matrix3(halfAxes);\n  }\n\n  /** Returns an array with three halfSizes for the bounding box */\n  get halfSize(): number[] {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    return [new Vector3(xAxis).len(), new Vector3(yAxis).len(), new Vector3(zAxis).len()];\n  }\n\n  /** Returns a quaternion describing the orientation of the bounding box */\n  get quaternion(): Quaternion {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    const normXAxis = new Vector3(xAxis).normalize();\n    const normYAxis = new Vector3(yAxis).normalize();\n    const normZAxis = new Vector3(zAxis).normalize();\n    return new Quaternion().fromMatrix3(new Matrix3([...normXAxis, ...normYAxis, ...normZAxis]));\n  }\n\n  /**\n   * Create OrientedBoundingBox from quaternion based OBB,\n   */\n  fromCenterHalfSizeQuaternion(\n    center: number[],\n    halfSize: number[],\n    quaternion: number[]\n  ): OrientedBoundingBox {\n    const quaternionObject = new Quaternion(quaternion);\n    const directionsMatrix = new Matrix3().fromQuaternion(quaternionObject);\n    directionsMatrix[0] = directionsMatrix[0] * halfSize[0];\n    directionsMatrix[1] = directionsMatrix[1] * halfSize[0];\n    directionsMatrix[2] = directionsMatrix[2] * halfSize[0];\n    directionsMatrix[3] = directionsMatrix[3] * halfSize[1];\n    directionsMatrix[4] = directionsMatrix[4] * halfSize[1];\n    directionsMatrix[5] = directionsMatrix[5] * halfSize[1];\n    directionsMatrix[6] = directionsMatrix[6] * halfSize[2];\n    directionsMatrix[7] = directionsMatrix[7] * halfSize[2];\n    directionsMatrix[8] = directionsMatrix[8] * halfSize[2];\n    this.center = new Vector3().from(center);\n    this.halfAxes = directionsMatrix;\n    return this;\n  }\n\n  /** Duplicates a OrientedBoundingBox instance. */\n  clone(): OrientedBoundingBox {\n    return new OrientedBoundingBox(this.center, this.halfAxes);\n  }\n\n  /** Compares the provided OrientedBoundingBox component wise and returns */\n  equals(right: OrientedBoundingBox): boolean {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes))\n    );\n  }\n\n  /** Computes a tight-fitting bounding sphere enclosing the provided oriented bounding box. */\n  getBoundingSphere(result = new BoundingSphere()): BoundingSphere {\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // Calculate \"corner\" vector\n    const cornerVector = scratchVector3.copy(u).add(v).add(w);\n\n    result.center.copy(this.center);\n    result.radius = cornerVector.magnitude();\n\n    return result;\n  }\n\n  /** Determines which side of a plane the oriented bounding box is located. */\n  intersectPlane(plane: Plane): number {\n    const center = this.center;\n    const normal = plane.normal;\n    const halfAxes = this.halfAxes;\n\n    const normalX = normal.x;\n    const normalY = normal.y;\n    const normalZ = normal.z;\n\n    // Plane is used as if it is its normal; the first three components are assumed to be normalized\n    const radEffective =\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN0ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN0ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN0ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN1ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN1ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN1ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN2ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN2ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN2ROW2]\n      );\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    if (distanceToPlane <= -radEffective) {\n      // The entire box is on the negative side of the plane normal\n      return INTERSECTION.OUTSIDE;\n    } else if (distanceToPlane >= radEffective) {\n      // The entire box is on the positive side of the plane normal\n      return INTERSECTION.INSIDE;\n    }\n    return INTERSECTION.INTERSECTING;\n  }\n\n  /** Computes the estimated distance from the closest point on a bounding box to a point. */\n  distanceTo(point: readonly number[]): number {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  /**\n   * Computes the estimated distance squared from the closest point\n   * on a bounding box to a point.\n   * See Geometric Tools for Computer Graphics 10.4.2\n   */\n  distanceSquaredTo(point: readonly number[]): number {\n    // Computes the estimated distance squared from the\n    // closest point on a bounding box to a point.\n    // See Geometric Tools for Computer Graphics 10.4.2\n    const offset = scratchOffset.from(point).subtract(this.center);\n\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    const uHalf = u.magnitude();\n    const vHalf = v.magnitude();\n    const wHalf = w.magnitude();\n\n    u.normalize();\n    v.normalize();\n    w.normalize();\n\n    let distanceSquared = 0.0;\n    let d;\n\n    d = Math.abs(offset.dot(u)) - uHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(v)) - vHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(w)) - wHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n  /**\n   * The distances calculated by the vector from the center of the bounding box\n   * to position projected onto direction.\n   *\n   * - If you imagine the infinite number of planes with normal direction,\n   *   this computes the smallest distance to the closest and farthest planes\n   *   from `position` that intersect the bounding box.\n   *\n   * @param position The position to calculate the distance from.\n   * @param direction The direction from position.\n   * @param result An Interval (array of length 2) to store the nearest and farthest distances.\n   * @returns Interval (array of length 2) with nearest and farthest distances\n   *   on the bounding box from position in direction.\n   */\n  // eslint-disable-next-line max-statements\n  computePlaneDistances(\n    position: readonly number[],\n    direction: Vector3,\n    result: number[] = [-0, -0]\n  ): number[] {\n    let minDist = Number.POSITIVE_INFINITY;\n    let maxDist = Number.NEGATIVE_INFINITY;\n\n    const center = this.center;\n    const halfAxes = this.halfAxes;\n\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // project first corner\n    const corner = scratchCorner.copy(u).add(v).add(w).add(center);\n\n    const toCenter = scratchToCenter.copy(corner).subtract(position);\n    let mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project second corner\n    corner.copy(center).add(u).add(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project third corner\n    corner.copy(center).add(u).subtract(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fourth corner\n    corner.copy(center).add(u).subtract(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fifth corner\n    center.copy(corner).subtract(u).add(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project sixth corner\n    center.copy(corner).subtract(u).add(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project seventh corner\n    center.copy(corner).subtract(u).subtract(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project eighth corner\n    center.copy(corner).subtract(u).subtract(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    result[0] = minDist;\n    result[1] = maxDist;\n    return result;\n  }\n\n  /**\n   * Applies a 4x4 affine transformation matrix to a bounding sphere.\n   * @param transform The transformation matrix to apply to the bounding sphere.\n   * @returns itself, i.e. the modified BoundingVolume.\n   */\n  transform(transformation: readonly number[]): this {\n    this.center.transformAsPoint(transformation);\n\n    const xAxis = this.halfAxes.getColumn(0, scratchVectorU);\n    xAxis.transformAsPoint(transformation);\n\n    const yAxis = this.halfAxes.getColumn(1, scratchVectorV);\n    yAxis.transformAsPoint(transformation);\n\n    const zAxis = this.halfAxes.getColumn(2, scratchVectorW);\n    zAxis.transformAsPoint(transformation);\n\n    this.halfAxes = new Matrix3([...xAxis, ...yAxis, ...zAxis]);\n    return this;\n  }\n\n  getTransform(): Matrix4 {\n    // const modelMatrix = Matrix4.fromRotationTranslation(this.boundingVolume.halfAxes, this.boundingVolume.center);\n    // return modelMatrix;\n    throw new Error('not implemented');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}