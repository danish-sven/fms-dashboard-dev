{"ast":null,"code":"import getHiResTimestamp from \"../utils/hi-res-timestamp.js\";\nexport default class Stat {\n  constructor(name, type) {\n    this.name = void 0;\n    this.type = void 0;\n    this.sampleSize = 1;\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n  reset() {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n    return this;\n  }\n  setSampleSize(samples) {\n    this.sampleSize = samples;\n    return this;\n  }\n  incrementCount() {\n    this.addCount(1);\n    return this;\n  }\n  decrementCount() {\n    this.subtractCount(1);\n    return this;\n  }\n  addCount(value) {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  subtractCount(value) {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  addTime(time) {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n    return this;\n  }\n  timeStart() {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n    return this;\n  }\n  timeEnd() {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n    return this;\n  }\n  getSampleAverageCount() {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n  getSampleAverageTime() {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n  getSampleHz() {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n  getAverageCount() {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n  getAverageTime() {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n  getHz() {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n  _checkSampling() {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}","map":{"version":3,"names":["getHiResTimestamp","Stat","constructor","name","type","sampleSize","time","count","samples","lastTiming","lastSampleTime","lastSampleCount","_count","_time","_samples","_startTime","_timerPending","reset","setSampleSize","incrementCount","addCount","decrementCount","subtractCount","value","_checkSampling","addTime","timeStart","timeEnd","getSampleAverageCount","getSampleAverageTime","getSampleHz","getAverageCount","getAverageTime","getHz"],"sources":["../../src/lib/stat.ts"],"sourcesContent":["import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  readonly name: string;\n  readonly type: string | undefined;\n  sampleSize: number = 1;\n  time: number = 0;\n  count: number = 0;\n  samples: number = 0;\n  lastTiming: number = 0;\n  lastSampleTime: number = 0;\n  lastSampleCount: number = 0;\n\n  _count: number = 0;\n  _time: number = 0;\n  _samples: number = 0;\n  _startTime: number = 0;\n  _timerPending: boolean = false;\n\n  constructor(name: string, type?: string) {\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n\n  reset(): this {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n\n    return this;\n  }\n\n  setSampleSize(samples: number): this {\n    this.sampleSize = samples;\n    return this;\n  }\n\n  /** Call to increment count (+1) */\n  incrementCount(): this {\n    this.addCount(1);\n\n    return this;\n  }\n\n  /** Call to decrement count (-1) */\n  decrementCount(): this {\n    this.subtractCount(1);\n\n    return this;\n  }\n\n  /** Increase count */\n  addCount(value: number): this {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Decrease count */\n  subtractCount(value: number): this {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Add an arbitrary timing and bump the count */\n  addTime(time: number): this {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Start a timer */\n  timeStart(): this {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n\n    return this;\n  }\n\n  /** End a timer. Adds to time and bumps the timing count. */\n  timeEnd(): this {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount(): number {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  /** Calculate average time / count for the previous window */\n  getSampleAverageTime(): number {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  /** Calculate counts per second for the previous window */\n  getSampleHz(): number {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount(): number {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  /** Calculate average time / count */\n  getAverageTime(): number {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  /** Calculate counts per second */\n  getHz(): number {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  _checkSampling(): void {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}