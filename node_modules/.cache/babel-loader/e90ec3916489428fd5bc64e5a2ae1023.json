{"ast":null,"code":"import { lerp } from '@math.gl/core';\nconst availableTransformations = {\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon\n};\nfunction Point(_ref, _ref2, viewport) {\n  let [pointX, pointY] = _ref;\n  let [nw, se] = _ref2;\n  const x = lerp(nw[0], se[0], pointX);\n  const y = lerp(nw[1], se[1], pointY);\n  return viewport.unprojectFlat([x, y]);\n}\nfunction getPoints(geometry, bbox, viewport) {\n  return geometry.map(g => Point(g, bbox, viewport));\n}\nfunction MultiPoint(multiPoint, bbox, viewport) {\n  return getPoints(multiPoint, bbox, viewport);\n}\nfunction LineString(line, bbox, viewport) {\n  return getPoints(line, bbox, viewport);\n}\nfunction MultiLineString(multiLineString, bbox, viewport) {\n  return multiLineString.map(lineString => LineString(lineString, bbox, viewport));\n}\nfunction Polygon(polygon, bbox, viewport) {\n  return polygon.map(polygonRing => getPoints(polygonRing, bbox, viewport));\n}\nfunction MultiPolygon(multiPolygon, bbox, viewport) {\n  return multiPolygon.map(polygon => Polygon(polygon, bbox, viewport));\n}\nexport function transform(geometry, bbox, viewport) {\n  const nw = viewport.projectFlat([bbox.west, bbox.north]);\n  const se = viewport.projectFlat([bbox.east, bbox.south]);\n  const projectedBbox = [nw, se];\n  return {\n    ...geometry,\n    coordinates: availableTransformations[geometry.type](geometry.coordinates, projectedBbox, viewport)\n  };\n}","map":{"version":3,"names":["lerp","availableTransformations","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","_ref","_ref2","viewport","pointX","pointY","nw","se","x","y","unprojectFlat","getPoints","geometry","bbox","map","g","multiPoint","line","multiLineString","lineString","polygon","polygonRing","multiPolygon","transform","projectFlat","west","north","east","south","projectedBbox","coordinates","type"],"sources":["../../../src/mvt-layer/coordinate-transform.ts"],"sourcesContent":["import {Viewport} from '@deck.gl/core';\nimport {lerp} from '@math.gl/core';\nimport {GeoBoundingBox} from '../tileset-2d';\n\nconst availableTransformations = {\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon\n};\n\nfunction Point([pointX, pointY]: [number, number], [nw, se]: number[][], viewport: Viewport) {\n  const x = lerp(nw[0], se[0], pointX);\n  const y = lerp(nw[1], se[1], pointY);\n\n  return viewport.unprojectFlat([x, y]);\n}\n\nfunction getPoints(geometry, bbox: number[][], viewport: Viewport) {\n  return geometry.map(g => Point(g, bbox, viewport));\n}\n\nfunction MultiPoint(multiPoint, bbox: number[][], viewport: Viewport) {\n  return getPoints(multiPoint, bbox, viewport);\n}\n\nfunction LineString(line, bbox: number[][], viewport: Viewport) {\n  return getPoints(line, bbox, viewport);\n}\n\nfunction MultiLineString(multiLineString, bbox: number[][], viewport: Viewport) {\n  return multiLineString.map(lineString => LineString(lineString, bbox, viewport));\n}\n\nfunction Polygon(polygon, bbox: number[][], viewport: Viewport) {\n  return polygon.map(polygonRing => getPoints(polygonRing, bbox, viewport));\n}\n\nfunction MultiPolygon(multiPolygon, bbox: number[][], viewport: Viewport) {\n  return multiPolygon.map(polygon => Polygon(polygon, bbox, viewport));\n}\n\nexport function transform(geometry, bbox: GeoBoundingBox, viewport: Viewport) {\n  const nw = viewport.projectFlat([bbox.west, bbox.north]);\n  const se = viewport.projectFlat([bbox.east, bbox.south]);\n  const projectedBbox = [nw, se];\n\n  return {\n    ...geometry,\n    coordinates: availableTransformations[geometry.type](\n      geometry.coordinates,\n      projectedBbox,\n      viewport\n    )\n  };\n}\n"],"mappings":"AACA,SAAQA,IAAR,QAAmB,eAAnB;AAGA,MAAMC,wBAAwB,GAAG;EAC/BC,KAD+B;EAE/BC,UAF+B;EAG/BC,UAH+B;EAI/BC,eAJ+B;EAK/BC,OAL+B;EAM/BC;AAN+B,CAAjC;AASA,SAASL,KAATA,CAAAM,IAAA,EAAAC,KAAA,EAAyEC,QAAzE,EAA6F;EAAA,IAA9E,CAACC,MAAD,EAASC,MAAT,CAAf,GAAAJ,IAAA;EAAA,IAAmD,CAACK,EAAD,EAAKC,EAAL,CAAnD,GAAAL,KAAA;EACE,MAAMM,CAAC,GAAGf,IAAI,CAACa,EAAE,CAAC,CAAD,CAAH,EAAQC,EAAE,CAAC,CAAD,CAAV,EAAeH,MAAf,CAAd;EACA,MAAMK,CAAC,GAAGhB,IAAI,CAACa,EAAE,CAAC,CAAD,CAAH,EAAQC,EAAE,CAAC,CAAD,CAAV,EAAeF,MAAf,CAAd;EAEA,OAAOF,QAAQ,CAACO,aAAT,CAAuB,CAACF,CAAD,EAAIC,CAAJ,CAAvB,CAAP;AACD;AAED,SAASE,SAATA,CAAmBC,QAAnB,EAA6BC,IAA7B,EAA+CV,QAA/C,EAAmE;EACjE,OAAOS,QAAQ,CAACE,GAAT,CAAaC,CAAC,IAAIpB,KAAK,CAACoB,CAAD,EAAIF,IAAJ,EAAUV,QAAV,CAAvB,CAAP;AACD;AAED,SAASP,UAATA,CAAoBoB,UAApB,EAAgCH,IAAhC,EAAkDV,QAAlD,EAAsE;EACpE,OAAOQ,SAAS,CAACK,UAAD,EAAaH,IAAb,EAAmBV,QAAnB,CAAhB;AACD;AAED,SAASN,UAATA,CAAoBoB,IAApB,EAA0BJ,IAA1B,EAA4CV,QAA5C,EAAgE;EAC9D,OAAOQ,SAAS,CAACM,IAAD,EAAOJ,IAAP,EAAaV,QAAb,CAAhB;AACD;AAED,SAASL,eAATA,CAAyBoB,eAAzB,EAA0CL,IAA1C,EAA4DV,QAA5D,EAAgF;EAC9E,OAAOe,eAAe,CAACJ,GAAhB,CAAoBK,UAAU,IAAItB,UAAU,CAACsB,UAAD,EAAaN,IAAb,EAAmBV,QAAnB,CAA5C,CAAP;AACD;AAED,SAASJ,OAATA,CAAiBqB,OAAjB,EAA0BP,IAA1B,EAA4CV,QAA5C,EAAgE;EAC9D,OAAOiB,OAAO,CAACN,GAAR,CAAYO,WAAW,IAAIV,SAAS,CAACU,WAAD,EAAcR,IAAd,EAAoBV,QAApB,CAApC,CAAP;AACD;AAED,SAASH,YAATA,CAAsBsB,YAAtB,EAAoCT,IAApC,EAAsDV,QAAtD,EAA0E;EACxE,OAAOmB,YAAY,CAACR,GAAb,CAAiBM,OAAO,IAAIrB,OAAO,CAACqB,OAAD,EAAUP,IAAV,EAAgBV,QAAhB,CAAnC,CAAP;AACD;AAED,OAAO,SAASoB,SAATA,CAAmBX,QAAnB,EAA6BC,IAA7B,EAAmDV,QAAnD,EAAuE;EAC5E,MAAMG,EAAE,GAAGH,QAAQ,CAACqB,WAAT,CAAqB,CAACX,IAAI,CAACY,IAAN,EAAYZ,IAAI,CAACa,KAAjB,CAArB,CAAX;EACA,MAAMnB,EAAE,GAAGJ,QAAQ,CAACqB,WAAT,CAAqB,CAACX,IAAI,CAACc,IAAN,EAAYd,IAAI,CAACe,KAAjB,CAArB,CAAX;EACA,MAAMC,aAAa,GAAG,CAACvB,EAAD,EAAKC,EAAL,CAAtB;EAEA,OAAO;IACL,GAAGK,QADE;IAELkB,WAAW,EAAEpC,wBAAwB,CAACkB,QAAQ,CAACmB,IAAV,CAAxB,CACXnB,QAAQ,CAACkB,WADE,EAEXD,aAFW,EAGX1B,QAHW;EAFR,CAAP;AAQD"},"metadata":{},"sourceType":"module"}