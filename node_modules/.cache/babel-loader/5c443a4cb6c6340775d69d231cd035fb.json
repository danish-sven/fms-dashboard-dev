{"ast":null,"code":"import { Vector3, _MathUtils } from '@math.gl/core';\nconst scratchVector = new Vector3();\nconst scaleToGeodeticSurfaceIntersection = new Vector3();\nconst scaleToGeodeticSurfaceGradient = new Vector3();\nexport default function scaleToGeodeticSurface(cartesian, ellipsoid) {\n  let result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  const {\n    oneOverRadii,\n    oneOverRadiiSquared,\n    centerToleranceSquared\n  } = ellipsoid;\n  scratchVector.from(cartesian);\n  const positionX = scratchVector.x;\n  const positionY = scratchVector.y;\n  const positionZ = scratchVector.z;\n  const oneOverRadiiX = oneOverRadii.x;\n  const oneOverRadiiY = oneOverRadii.y;\n  const oneOverRadiiZ = oneOverRadii.z;\n  const x2 = positionX * positionX * oneOverRadiiX * oneOverRadiiX;\n  const y2 = positionY * positionY * oneOverRadiiY * oneOverRadiiY;\n  const z2 = positionZ * positionZ * oneOverRadiiZ * oneOverRadiiZ;\n  const squaredNorm = x2 + y2 + z2;\n  const ratio = Math.sqrt(1.0 / squaredNorm);\n  if (!Number.isFinite(ratio)) {\n    return undefined;\n  }\n  const intersection = scaleToGeodeticSurfaceIntersection;\n  intersection.copy(cartesian).scale(ratio);\n  if (squaredNorm < centerToleranceSquared) {\n    return intersection.to(result);\n  }\n  const oneOverRadiiSquaredX = oneOverRadiiSquared.x;\n  const oneOverRadiiSquaredY = oneOverRadiiSquared.y;\n  const oneOverRadiiSquaredZ = oneOverRadiiSquared.z;\n  const gradient = scaleToGeodeticSurfaceGradient;\n  gradient.set(intersection.x * oneOverRadiiSquaredX * 2.0, intersection.y * oneOverRadiiSquaredY * 2.0, intersection.z * oneOverRadiiSquaredZ * 2.0);\n  let lambda = (1.0 - ratio) * scratchVector.len() / (0.5 * gradient.len());\n  let correction = 0.0;\n  let xMultiplier;\n  let yMultiplier;\n  let zMultiplier;\n  let func;\n  do {\n    lambda -= correction;\n    xMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredX);\n    yMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredY);\n    zMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredZ);\n    const xMultiplier2 = xMultiplier * xMultiplier;\n    const yMultiplier2 = yMultiplier * yMultiplier;\n    const zMultiplier2 = zMultiplier * zMultiplier;\n    const xMultiplier3 = xMultiplier2 * xMultiplier;\n    const yMultiplier3 = yMultiplier2 * yMultiplier;\n    const zMultiplier3 = zMultiplier2 * zMultiplier;\n    func = x2 * xMultiplier2 + y2 * yMultiplier2 + z2 * zMultiplier2 - 1.0;\n    const denominator = x2 * xMultiplier3 * oneOverRadiiSquaredX + y2 * yMultiplier3 * oneOverRadiiSquaredY + z2 * zMultiplier3 * oneOverRadiiSquaredZ;\n    const derivative = -2.0 * denominator;\n    correction = func / derivative;\n  } while (Math.abs(func) > _MathUtils.EPSILON12);\n  return scratchVector.scale([xMultiplier, yMultiplier, zMultiplier]).to(result);\n}","map":{"version":3,"names":["Vector3","_MathUtils","scratchVector","scaleToGeodeticSurfaceIntersection","scaleToGeodeticSurfaceGradient","scaleToGeodeticSurface","cartesian","ellipsoid","result","arguments","length","undefined","oneOverRadii","oneOverRadiiSquared","centerToleranceSquared","from","positionX","x","positionY","y","positionZ","z","oneOverRadiiX","oneOverRadiiY","oneOverRadiiZ","x2","y2","z2","squaredNorm","ratio","Math","sqrt","Number","isFinite","intersection","copy","scale","to","oneOverRadiiSquaredX","oneOverRadiiSquaredY","oneOverRadiiSquaredZ","gradient","set","lambda","len","correction","xMultiplier","yMultiplier","zMultiplier","func","xMultiplier2","yMultiplier2","zMultiplier2","xMultiplier3","yMultiplier3","zMultiplier3","denominator","derivative","abs","EPSILON12"],"sources":["../../../../src/ellipsoid/helpers/scale-to-geodetic-surface.ts"],"sourcesContent":["/* eslint-disable */\nimport {Vector3, _MathUtils} from '@math.gl/core';\nimport type Ellipsoid from '../ellipsoid';\n\nconst scratchVector = new Vector3();\nconst scaleToGeodeticSurfaceIntersection = new Vector3();\nconst scaleToGeodeticSurfaceGradient = new Vector3();\n\n// Scales the provided Cartesian position along the geodetic surface normal\n// so that it is on the surface of this ellipsoid.  If the position is\n// at the center of the ellipsoid, this function returns undefined.\nexport default function scaleToGeodeticSurface(\n  cartesian: number[],\n  ellipsoid: Ellipsoid,\n  result: number[] = []\n): number[] {\n  const {oneOverRadii, oneOverRadiiSquared, centerToleranceSquared} = ellipsoid;\n\n  scratchVector.from(cartesian);\n\n  const positionX = scratchVector.x;\n  const positionY = scratchVector.y;\n  const positionZ = scratchVector.z;\n\n  const oneOverRadiiX = oneOverRadii.x;\n  const oneOverRadiiY = oneOverRadii.y;\n  const oneOverRadiiZ = oneOverRadii.z;\n\n  const x2 = positionX * positionX * oneOverRadiiX * oneOverRadiiX;\n  const y2 = positionY * positionY * oneOverRadiiY * oneOverRadiiY;\n  const z2 = positionZ * positionZ * oneOverRadiiZ * oneOverRadiiZ;\n\n  // Compute the squared ellipsoid norm.\n  const squaredNorm = x2 + y2 + z2;\n  const ratio = Math.sqrt(1.0 / squaredNorm);\n\n  // When very close to center or at center\n  if (!Number.isFinite(ratio)) {\n    return undefined;\n  }\n\n  // As an initial approximation, assume that the radial intersection is the projection point.\n  const intersection = scaleToGeodeticSurfaceIntersection;\n  intersection.copy(cartesian).scale(ratio);\n\n  // If the position is near the center, the iteration will not converge.\n  if (squaredNorm < centerToleranceSquared) {\n    return intersection.to(result);\n  }\n\n  const oneOverRadiiSquaredX = oneOverRadiiSquared.x;\n  const oneOverRadiiSquaredY = oneOverRadiiSquared.y;\n  const oneOverRadiiSquaredZ = oneOverRadiiSquared.z;\n\n  // Use the gradient at the intersection point in place of the true unit normal.\n  // The difference in magnitude will be absorbed in the multiplier.\n  const gradient = scaleToGeodeticSurfaceGradient;\n  gradient.set(\n    intersection.x * oneOverRadiiSquaredX * 2.0,\n    intersection.y * oneOverRadiiSquaredY * 2.0,\n    intersection.z * oneOverRadiiSquaredZ * 2.0\n  );\n\n  // Compute the initial guess at the normal vector multiplier, lambda.\n  let lambda = ((1.0 - ratio) * scratchVector.len()) / (0.5 * gradient.len());\n  let correction = 0.0;\n\n  let xMultiplier;\n  let yMultiplier;\n  let zMultiplier;\n  let func;\n\n  do {\n    lambda -= correction;\n\n    xMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredX);\n    yMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredY);\n    zMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredZ);\n\n    const xMultiplier2 = xMultiplier * xMultiplier;\n    const yMultiplier2 = yMultiplier * yMultiplier;\n    const zMultiplier2 = zMultiplier * zMultiplier;\n\n    const xMultiplier3 = xMultiplier2 * xMultiplier;\n    const yMultiplier3 = yMultiplier2 * yMultiplier;\n    const zMultiplier3 = zMultiplier2 * zMultiplier;\n\n    func = x2 * xMultiplier2 + y2 * yMultiplier2 + z2 * zMultiplier2 - 1.0;\n\n    // \"denominator\" here refers to the use of this expression in the velocity and acceleration\n    // computations in the sections to follow.\n    const denominator =\n      x2 * xMultiplier3 * oneOverRadiiSquaredX +\n      y2 * yMultiplier3 * oneOverRadiiSquaredY +\n      z2 * zMultiplier3 * oneOverRadiiSquaredZ;\n\n    const derivative = -2.0 * denominator;\n\n    correction = func / derivative;\n  } while (Math.abs(func) > _MathUtils.EPSILON12);\n\n  return scratchVector.scale([xMultiplier, yMultiplier, zMultiplier]).to(result);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}